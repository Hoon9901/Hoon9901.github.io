{"componentChunkName":"component---src-templates-post-tsx","path":"/spring_autowired/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"autowired-어노테이션을-이용한-의존-자동-주입\" style=\"position:relative;\"><a href=\"#autowired-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%9D%98%EC%A1%B4-%EC%9E%90%EB%8F%99-%EC%A3%BC%EC%9E%85\" aria-label=\"autowired 어노테이션을 이용한 의존 자동 주입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@Autowired 어노테이션을 이용한 의존 자동 주입</h1>\n<h2 id=\"자동-주입-기능을-사용하지-않은-코드-직접-의존-주입\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%8F%99-%EC%A3%BC%EC%9E%85-%EA%B8%B0%EB%8A%A5%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%80-%EC%BD%94%EB%93%9C-%EC%A7%81%EC%A0%91-%EC%9D%98%EC%A1%B4-%EC%A3%BC%EC%9E%85\" aria-label=\"자동 주입 기능을 사용하지 않은 코드 직접 의존 주입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자동 주입 기능을 사용하지 않은 코드 (직접 의존 주입)</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MemberDao</span> <span class=\"token function\">memberDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemberDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ChangePasswordService</span> <span class=\"token function\">changePwdSvc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ChangePasswordService</span> pwdSvc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChangePasswordService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">*</span><span class=\"token operator\">*</span>pwdSvc<span class=\"token punctuation\">.</span><span class=\"token function\">setMemberDao</span><span class=\"token punctuation\">(</span><span class=\"token function\">memberDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n        <span class=\"token keyword\">return</span> pwdSvc<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드에서는 직접 세터 메소드를 통해 의존 주입을 하고있다 <br/>\n자동 주입 기능을 사용하면 스프링이 알아서 의존 객체를 찾아서 주입한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MemberDao</span> <span class=\"token function\">memberDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemberDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ChangePasswordService</span> <span class=\"token function\">changePwdSvc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ChangePasswordService</span> pwdSvc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChangePasswordService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> pwdSvc<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>자동 주입 기능을 사용하면, 위 코드 처럼 의존 객체를 명시하지 않아도,<br/>\n스프링이 필요한 의존 Bean 객체를 찾아서 주입해준다.</p>\n<h1 id=\"자동-주입-기능-사용\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%8F%99-%EC%A3%BC%EC%9E%85-%EA%B8%B0%EB%8A%A5-%EC%82%AC%EC%9A%A9\" aria-label=\"자동 주입 기능 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자동 주입 기능 사용</h1>\n<p>매우 간단하다. 의존을 주입할 대상에 @Autowired 어노테이션을 붙이기만 하면 된다.</p>\n<h2 id=\"autowired\" style=\"position:relative;\"><a href=\"#autowired\" aria-label=\"autowired permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@Autowired</h2>\n<p>Bean 객체의 메소드에 @Autowired 어노테이션을 붙이면 스프링은 해당 메서드를 호출한다.\n</br> 이때 메서드 파라미터 타입에 해당하는 Bean 객체를 찾아 인자로 주입한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">MemberDao</span> <span class=\"token function\">memberDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemberDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// 1. 필드 자동 주입</span>\n<span class=\"token annotation punctuation\">@Autowired</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">MemberDao</span> mebmerDao<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2. 메서드 자동 주입</span>\n<span class=\"token annotation punctuation\">@Autowired</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMemberDao</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MemberDao</span> memberDao<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memberDao <span class=\"token operator\">=</span> memberDao<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>@Autowired 어노테이션을 필드나, 세터 메서드에 붙이면\n</br> 스프링은 타입이 일치하는 Bean 객체를 찾아서 주입한다.</p>\n<h2 id=\"자동-주입-예외-케이스\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%8F%99-%EC%A3%BC%EC%9E%85-%EC%98%88%EC%99%B8-%EC%BC%80%EC%9D%B4%EC%8A%A4\" aria-label=\"자동 주입 예외 케이스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자동 주입 예외 케이스</h2>\n<h3 id=\"주입해야할-빈-객체가-없다면\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9E%85%ED%95%B4%EC%95%BC%ED%95%A0-%EB%B9%88-%EA%B0%9D%EC%B2%B4%EA%B0%80-%EC%97%86%EB%8B%A4%EB%A9%B4\" aria-label=\"주입해야할 빈 객체가 없다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주입해야할 빈 객체가 없다면?</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Error creating bean with name &#39;memberRegSvc&#39;: Unsatisfied dependency expressed through field &#39;memberDao&#39;; \nnested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type &#39;com.example.sp5chap04.spring.MemberDao&#39; available: expected at least 1 bean which qualifies as autowire candidate</code></pre></div>\n<p>memberRegSvc Bean 객체가 생성하는 도중, 의존하는 memberDao 객체를 스프링이 찾이를 못해 <code class=\"language-text\">NoSuchBeanDefinitionException</code>\n</br> 예외가 발생했다.</p>\n<h3 id=\"주입해야할-빈이-두개-이상이면\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9E%85%ED%95%B4%EC%95%BC%ED%95%A0-%EB%B9%88%EC%9D%B4-%EB%91%90%EA%B0%9C-%EC%9D%B4%EC%83%81%EC%9D%B4%EB%A9%B4\" aria-label=\"주입해야할 빈이 두개 이상이면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주입해야할 빈이 두개 이상이면?</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token comment\">// MemberPrinter 를 주입받는 세터 메서드</span>\n\t<span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMemberPrinter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MemberPrinter</span> printer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>printer <span class=\"token operator\">=</span> printer<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 동일한 Bean 객체를 생성한다</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MemberPrinter</span> <span class=\"token function\">memberPrinter1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemberPrinter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MemberPrinter</span> <span class=\"token function\">memberPrinter2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemberPrinter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>해당 코드 처럼, MemberPrinter 타입의 Bean 객체가 2개 정도 만들어진 상태에서는 어떻게 될까?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type &#39;com.example.sp5chap04.spring.MemberPrinter&#39; available: expected single matching bean but found 2: memberPrinter1,memberPrinter2</code></pre></div>\n<p>MemberPrinter 타입의 빈이 여러개 있어서, 한정할 수 없는데, </br>\n해당 타입 빈이 한개가 아니라, 이름이 memberPrinter1, memberPrinter2 인 두개의 빈을 </br>\n발견 했다는 사실을 알려준다. </br></p>\n<h2 id=\"qualifier-어노테이션\" style=\"position:relative;\"><a href=\"#qualifier-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98\" aria-label=\"qualifier 어노테이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@Qualifier 어노테이션</h2>\n<p>자동 주입 가능한 빈이 두 개 이상이면 자동 주입할 빈을 지정하는 방법이 필요할 때 시용한다. <br/>\n@Qualifier 어노테이션을 사용하면 자동 주입 대상 빈을 한정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppCtx</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    \n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"printer\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MemberPrinter</span> <span class=\"token function\">memberPrinter1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemberPrinter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MemberPrinter</span> <span class=\"token function\">memberPrinter2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemberPrinter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드에서 memberPrinter1() 메소드에 \"printer\" 값을 갖는 @Qualifier 어노테이션을 붙였다 <br/>\n이 설정은 해당 Bean의 한정 값으로 \"printer\"를 지정한다.</p>\n<p>이렇게 지정한 한정 값은 @Autowired 어노테이션에서 자동 주입할 빈을 한정할 때 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberListPrinter</span><span class=\"token punctuation\">{</span>\n    \n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    \n\t<span class=\"token annotation punctuation\">@Autowired</span>\n\t<span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"printer\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMemberPrinter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MemberPrinter</span> printer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>printer <span class=\"token operator\">=</span> printer<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>setMemberPrinter() 메소드에 @Autowired 어노테이션을 붙였으므로 MemberPrinter 타입의 빈을 자동 주입한다. <br/>\n이떄 @Qualifier 어노테이션 값이 \"printer\" 이므로 한정 값이 \"printer\"인 Bean을 의존 주입 후보로 사용한다.</p>\n<p>@Autowired 어노테이션을 필드, 메서드에 모두 적용할 수 있으므로 @Qualifier 어노테이션도 필드, 메소드 모두 적용할 수 있다.</p>","excerpt":"@Autowired 어노테이션을 이용한 의존 자동 주입 자동 주입 기능을 사용하지 않은 코드 (직접 의존 주입) 위 코드에서는 직접 세터 메소드를 통해 의존 주입을 하고있다 \n자동 주입 기능을 사용하면 스프링이 알아서 의존 객체를 찾아서 주입한다. …","tableOfContents":"<ul>\n<li>\n<p><a href=\"/spring_autowired/#autowired-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%9D%98%EC%A1%B4-%EC%9E%90%EB%8F%99-%EC%A3%BC%EC%9E%85\">@Autowired 어노테이션을 이용한 의존 자동 주입</a></p>\n<ul>\n<li><a href=\"/spring_autowired/#%EC%9E%90%EB%8F%99-%EC%A3%BC%EC%9E%85-%EA%B8%B0%EB%8A%A5%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%80-%EC%BD%94%EB%93%9C-%EC%A7%81%EC%A0%91-%EC%9D%98%EC%A1%B4-%EC%A3%BC%EC%9E%85\">자동 주입 기능을 사용하지 않은 코드 (직접 의존 주입)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/spring_autowired/#%EC%9E%90%EB%8F%99-%EC%A3%BC%EC%9E%85-%EA%B8%B0%EB%8A%A5-%EC%82%AC%EC%9A%A9\">자동 주입 기능 사용</a></p>\n<ul>\n<li><a href=\"/spring_autowired/#autowired\">@Autowired</a></li>\n<li>\n<p><a href=\"/spring_autowired/#%EC%9E%90%EB%8F%99-%EC%A3%BC%EC%9E%85-%EC%98%88%EC%99%B8-%EC%BC%80%EC%9D%B4%EC%8A%A4\">자동 주입 예외 케이스</a></p>\n<ul>\n<li><a href=\"/spring_autowired/#%EC%A3%BC%EC%9E%85%ED%95%B4%EC%95%BC%ED%95%A0-%EB%B9%88-%EA%B0%9D%EC%B2%B4%EA%B0%80-%EC%97%86%EB%8B%A4%EB%A9%B4\">주입해야할 빈 객체가 없다면?</a></li>\n<li><a href=\"/spring_autowired/#%EC%A3%BC%EC%9E%85%ED%95%B4%EC%95%BC%ED%95%A0-%EB%B9%88%EC%9D%B4-%EB%91%90%EA%B0%9C-%EC%9D%B4%EC%83%81%EC%9D%B4%EB%A9%B4\">주입해야할 빈이 두개 이상이면?</a></li>\n</ul>\n</li>\n<li><a href=\"/spring_autowired/#qualifier-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98\">@Qualifier 어노테이션</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/spring_autowired/"},"frontmatter":{"title":"[Spring] @Autowird 어노테이션을 이용한 의존 자동 주입과 @Qualifier 빈 한정자","date":"Jun 23, 2022","tags":["Spring"],"keywords":["스프링","스프링부트","SpringBoot","Autowired","DI"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/spring_autowired/","series":[],"lastmod":"2022-06-23"}},"staticQueryHashes":["2027115977","694178885"]}