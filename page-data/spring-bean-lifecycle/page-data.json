{"componentChunkName":"component---src-templates-post-tsx","path":"/spring-bean-lifecycle/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"컨테이너-라이프사이클\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4\" aria-label=\"컨테이너 라이프사이클 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨테이너 라이프사이클</h1>\n<p>스프링 컨테이너는 초기화와 종료라는 라이프사이클을 갖는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 1. 컨테이너 초기화</span>\n<span class=\"token class-name\">AnnotationConfigApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AppContext</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 2. 컨테이너에서 빈 객체를 구해서 사용</span>\n<span class=\"token class-name\">Greeter</span> g <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"greeter\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Greeter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"스프링\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>mgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 3. 컨테이너 종료</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>AnnotationConfigApplicationContext의 생성자를 이용해서 컨텍스트를 객체를 생성하는데 이 시점에 스프링 컨테이너를 초기화한다. 스프링 컨테이너는 설정 클래스에서 정보를 읽어와 알맞은 빈 객체를 생성하고 각 빈을 연결하는 작업을 수행한다.</p>\n<p>컨테이너 초기화가 완료되면 컨테이너를 사용할 수 있다. 컨테이너를 사용한다는 것은 getBean()과 같은 메서드를 이용해서 컨테이너에 보관된 빈 객체를 구한다는 것을 뜻함.</p>\n<p>컨테이너 사용이 끝나면 컨테이너를 종료한다. 컨테이너를 종료할 때 사용하는 메서드가 close() 메서드이다. close() 메서드는 AbstractApplicationContext 클래스에 정의되어 있다. 자바 설정을 사용하는 AnnotationConfigApplicationContext 클래스 모두 AbstractApplicationContext 클래스를 상속받고 있다.</p>\n<p>컨테이너를 초기화하고 종료할 땐 다음의 작업도 함께 수행한다.</p>\n<ul>\n<li>컨테이너 초기화 → 빈 객체의 생성, 의존 주입, 초기화</li>\n<li>컨테이너 종료 → 빈 객체의 소멸</li>\n</ul>\n<h1 id=\"빈의-라이프사이클\" style=\"position:relative;\"><a href=\"#%EB%B9%88%EC%9D%98-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4\" aria-label=\"빈의 라이프사이클 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빈의 라이프사이클</h1>\n<p>스프링 컨테이너는 빈 객체의 라이프사이클을 관리한다. 컨테이너가 괸리하는 빈 객체의 라이프사이클은 다음과 같다.</p>\n<ul>\n<li>\n<p>빈 객체의 라이프사이클</p>\n<ol>\n<li>객체 생성</li>\n<li>의존 설정 → 의존 자동 주입을 통한 의존 설정 수행 </li>\n<li>초기화</li>\n<li>소멸</li>\n</ol>\n</li>\n</ul>\n<p>스프링 컨테이너를 초기화할 때 스프링 컨테이너는 가장 먼저 빈 객체를 생성하고 의존을 설정한다. </p>\n<p>모든 의존 설정이 완료되면 빈 객체의 초기화를 수행한다. 빈 객체를 초기화하기 위해 스프링은 빈 객체의 지정된 메서드를 호출한다. </p>\n<p>스프링 컨테이너를 종료하면 스프링 컨테이너는 빈 객체의 소멸을 처리한다. 이때에도 지정한 메서드를 호출한다.</p>","excerpt":"컨테이너 라이프사이클 스프링 컨테이너는 초기화와 종료라는 라이프사이클을 갖는다. AnnotationConfigApplicationContext의 생성자를 이용해서 컨텍스트를 객체를 생성하는데 이 시점에 스프링 컨테이너를 초기화한다. 스프링 컨테이너는…","tableOfContents":"<ul>\n<li><a href=\"/spring-bean-lifecycle/#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4\">컨테이너 라이프사이클</a></li>\n<li><a href=\"/spring-bean-lifecycle/#%EB%B9%88%EC%9D%98-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4\">빈의 라이프사이클</a></li>\n</ul>","fields":{"slug":"/spring-bean-lifecycle/"},"frontmatter":{"title":"[Spring] 스프링 컨테이너와 빈의 라이프사이클","date":"Jun 28, 2022","tags":["Spring"],"keywords":["스프링","스프링부트","SpringBoot","bean","lifecycle"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/spring-bean-lifecycle/","series":[],"lastmod":"2022-06-28"}},"staticQueryHashes":["2027115977","694178885"]}