{"componentChunkName":"component---src-templates-post-tsx","path":"/spring-bean-init-and-disposable/","result":{"data":{"markdownRemark":{"html":"<p>스프링 컨테이너는 빈 객체를 초기화하고 소멸하기 위해 빈 객체의 지정한 메서드를 호출한다. 스프링은 다음의 두 인터페이스에 이 메서드를 정의한다.</p>\n<ul>\n<li>org.springframework.beans.factory.<strong>initalizingBean</strong></li>\n<li>org.springframework.beans.factory.<strong>DisposableBean</strong></li>\n</ul>\n<p>두 인터페이스는 다음과 같다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> initalizingBean <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DisposableBean</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>빈 객체를 생성한 뒤에 <strong>초기화 과정이</strong> 필요 : <code class=\"language-text\">InitalizingBean</code> 인터페이스를 상속하고 afterPropertiesSet() 메소드를 구현한다.</li>\n<li>빈 객체의 <strong>소멸 과정이</strong> 필요 :  <code class=\"language-text\">DisposableBean</code> 인터페이스를 상속하고 <code class=\"language-text\">destroy()</code> 메소드를 구현한다.</li>\n</ul>\n<h3 id=\"초기화와-소멸과정이-필요한-예\" style=\"position:relative;\"><a href=\"#%EC%B4%88%EA%B8%B0%ED%99%94%EC%99%80-%EC%86%8C%EB%A9%B8%EA%B3%BC%EC%A0%95%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C-%EC%98%88\" aria-label=\"초기화와 소멸과정이 필요한 예 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>초기화와 소멸과정이 필요한 예</h3>\n<ol>\n<li>\n<p>데이터베이스 커넥션 풀</p>\n<p>커넥션 풀을 위한 빈 객체는 초기화 과정에 데이터베이스 연결을 생성한다. 컨테이너를 사용하는 동안 연결을 유지하고 빈 객체를 소멸할 때 사용중인 데이터베이스 연결을 끊어야 한다.</p>\n</li>\n<li>\n<p>채팅 클라이언트</p>\n<p>채팅 클라이언트는 시작할 때 서버와 연결을 생성하고 종료할 때 연결을 끊는다. 이때 서버와의 연결을 생성하고 끊는 작업을 초기화/소멸 시점에 수행하면 된다.</p>\n</li>\n</ol>\n<h3 id=\"간단한-코드-예제를-통해-알아보기\" style=\"position:relative;\"><a href=\"#%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%BD%94%EB%93%9C-%EC%98%88%EC%A0%9C%EB%A5%BC-%ED%86%B5%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0\" aria-label=\"간단한 코드 예제를 통해 알아보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>간단한 코드 예제를 통해 알아보기</h3>\n<p>간단하게 빈 객체의 초기화와 소멸 시점을 코드를 작성하고 실행해서 알아보자</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InitializingBean</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">DisposableBean</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> host<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> host<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>host <span class=\"token operator\">=</span> host<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Client.afterPropertiesSet() 실행\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Client.sned() to \"</span> <span class=\"token operator\">+</span> host<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Client.destroy() 실행\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>실행되는 순서를 알아보기 위해 콘솔에 관련 메세지를 출력하도록 했다.</p>\n<p><code class=\"language-text\">Client</code> 클래스를 위한 설정 클래스는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppCtxForClient</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Client</span> <span class=\"token function\">client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Client</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        client<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"host\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> client<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 <code class=\"language-text\">AppCtxForClient</code>를 이용해서 스프링 컨테이너를 생성하고 <code class=\"language-text\">Client</code> 빈 객체를 구해 사용하는 코드를 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">AbstractApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">AppCtxForClient</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Client</span> client <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Client</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        client<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Main</code> 클래스를 실행해보면 다음과 같은 메세지가 출력된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Client</span><span class=\"token punctuation\">.</span><span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 실행\n<span class=\"token class-name\">Client</span><span class=\"token punctuation\">.</span><span class=\"token function\">sned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">host</span>\n<span class=\"token class-name\">Client</span><span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 실행\n<span class=\"token number\">7</span>월 <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2022</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span><span class=\"token number\">06</span><span class=\"token operator\">:</span><span class=\"token number\">00</span> 오후 <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span>AbstractApplicationContext</span> doClose\n정보<span class=\"token operator\">:</span> <span class=\"token class-name\">Closing</span> <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span>AnnotationConfigApplicationContext</span><span class=\"token annotation punctuation\">@4b952a2d</span><span class=\"token operator\">:</span> startup date <span class=\"token punctuation\">[</span><span class=\"token class-name\">Thu</span> <span class=\"token class-name\">Jul</span> <span class=\"token number\">14</span> <span class=\"token number\">18</span><span class=\"token operator\">:</span><span class=\"token number\">05</span><span class=\"token operator\">:</span><span class=\"token number\">59</span> <span class=\"token constant\">KST</span> <span class=\"token number\">2022</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> root of context hierarchy</code></pre></div>\n<ol>\n<li>스프링 컨테이너 생성</li>\n<li>빈 객체 생성</li>\n<li>\n<p>빈 객체 초기화</p>\n<ol>\n<li><code class=\"language-text\">afterPropertiesSet</code> 메소드 실행</li>\n</ol>\n</li>\n<li>스프링 컨테이너 종료</li>\n<li>\n<p>빈 객체 소멸</p>\n<ol>\n<li><code class=\"language-text\">destory</code> 메소드 실행</li>\n</ol>\n</li>\n</ol>\n<p>만약 <code class=\"language-text\">ctx.close()</code> 메소드가 실행되지 않다면 컨테이너의 종료 과정을 수행하지 않기 때문에 빈 객체의 소멸 과정도 실행되지 않는다.</p>","excerpt":"스프링 컨테이너는 빈 객체를 초기화하고 소멸하기 위해 빈 객체의 지정한 메서드를 호출한다. 스프링은 다음의 두 인터페이스에 이 메서드를 정의한다. org.springframework.beans.factory.initalizingBean org.spr…","tableOfContents":"<ul>\n<li><a href=\"/spring-bean-init-and-disposable/#%EC%B4%88%EA%B8%B0%ED%99%94%EC%99%80-%EC%86%8C%EB%A9%B8%EA%B3%BC%EC%A0%95%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C-%EC%98%88\">초기화와 소멸과정이 필요한 예</a></li>\n<li><a href=\"/spring-bean-init-and-disposable/#%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%BD%94%EB%93%9C-%EC%98%88%EC%A0%9C%EB%A5%BC-%ED%86%B5%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0\">간단한 코드 예제를 통해 알아보기</a></li>\n</ul>","fields":{"slug":"/spring-bean-init-and-disposable/"},"frontmatter":{"title":"[Spring] 빈 객체의 초기화와 소멸 : initalizingBean과 DisposableBean 인터페이스 ","date":"Jul 14, 2022","tags":["Spring","스프링5입문시리즈"],"keywords":["스프링","스프링부트","SpringBoot","Spring5","bean","lifecycle"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/spring-bean-init-and-disposable/","series":[],"lastmod":"2022-07-14"}},"staticQueryHashes":["2027115977","694178885"]}