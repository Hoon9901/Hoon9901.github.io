{"componentChunkName":"component---src-templates-post-tsx","path":"/json-web-token/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"1-jwt-json-web-token란\" style=\"position:relative;\"><a href=\"#1-jwt-json-web-token%EB%9E%80\" aria-label=\"1 jwt json web token란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. JWT (Json Web Token)란?</h1>\n<hr>\n<ul>\n<li>JSON 객체를 사용해서 토큰 자체에 정보를 저장하는 Web Token</li>\n<li>Header, Payload, Signature 3개 부분으로 구성됨.</li>\n<li>쿠키나 세션을 이용한 인증보다 안전하고 효율적임</li>\n<li>일반적으로는 <code class=\"language-text\">Authorization : &lt;type&gt; &lt;credentials&gt;</code> 형태로 Request Header 에 담겨져 오기 떄문에 Header 값을 확인해서 가져올 수 있음.</li>\n</ul>\n<h2 id=\"11-장단점\" style=\"position:relative;\"><a href=\"#11-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-label=\"11 장단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1 장단점</h2>\n<hr>\n<ul>\n<li>\n<p>장점</p>\n<ul>\n<li>중앙 인증 서버, 저장소에 대한 의존성이 없어서 수평확장에 유리</li>\n<li>Base64 URL Safe Encoding 이라 URL, Cookie, Header 어떤 형태로 사용가능</li>\n<li>Stateless 한 서버 구현 가능</li>\n<li>웹이 아닌 모바일에서도 사용 가능</li>\n<li>인증 정보를 다른 곳에서도 사용 가능 (OAuth)</li>\n</ul>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>Payload 의 정보가 많아지면 네트워크 사용량 증가</li>\n<li>다른 사람이 토큰을 decode 하여 데이터 확인 가능</li>\n<li>\n<p>토큰을 탈취당한 경우 대처하기 어려움</p>\n<ul>\n<li>기본적으로는 서버에서 관리하는게 아니다보니 탈취당한 경우 강제 로그아웃 처리가 불가능</li>\n<li>토큰 유효시간이 만료되기 전까지는 탈취자는 자유롭게 인증 가능</li>\n<li>그래서 유효시간을 짧게 가져가고 refresh Token 을 발급하는 방식으로 많이 사용</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"12-token-구성요소\" style=\"position:relative;\"><a href=\"#12-token-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C\" aria-label=\"12 token 구성요소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2 Token 구성요소</h2>\n<hr>\n<ul>\n<li>\n<p>Header</p>\n<ul>\n<li><code class=\"language-text\">alg</code> : Signature 를 해싱하기 위한 알고리즘 정보를 갖고 있음</li>\n<li><code class=\"language-text\">typ</code> : 토큰의 타입을 나타내는데 없어도 됨(보통 JWT 를 사용)</li>\n</ul>\n</li>\n<li>\n<p>Payload</p>\n<ul>\n<li>서버와 클라이언트가 주고받는, 시스템에서 실제로 사용될 정보에 대한 내용을 담고 있음</li>\n<li>JWT가 <a href=\"https://datatracker.ietf.org/doc/html/rfc7519#section-4.1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">기본적으로 갖고 있는 키워드</a>가 존재</li>\n<li>\n<p>원한다면 추가 가능</p>\n<ul>\n<li><code class=\"language-text\">iss</code> : 토큰 발급자</li>\n<li><code class=\"language-text\">sub</code> : 토큰 제목</li>\n<li><code class=\"language-text\">aud</code> : 토큰 대상</li>\n<li><code class=\"language-text\">exp</code> : 토큰의 만료시간</li>\n<li><code class=\"language-text\">nbf</code> : Not Before</li>\n<li><code class=\"language-text\">iat</code> : 토큰이 발급된 시간</li>\n<li><code class=\"language-text\">jti</code> : JWT의 고유 식별자</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Signature</p>\n<ul>\n<li>서버에서 토큰이 유효한지 검증하기 위한 문자열</li>\n<li>Header + Payload + Secret Key 로 값을 생성하므로 데이터 변조 여부를 판단 가능</li>\n<li>Secret Key 는 노출되지 않도록 서버에서 관리 필요</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"13-토큰-인증-타입\" style=\"position:relative;\"><a href=\"#13-%ED%86%A0%ED%81%B0-%EC%9D%B8%EC%A6%9D-%ED%83%80%EC%9E%85\" aria-label=\"13 토큰 인증 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.3 토큰 인증 타입</h2>\n<hr>\n<p><code class=\"language-text\">Authorization: &lt;type&gt; &lt;credentials&gt;</code> 형태에서 <code class=\"language-text\">&lt;type&gt;</code> 부분에 들어값 값.</p>\n<p>엄격한 규칙이 있는건 아니고, 일반적으로 많이 사용되는 형태</p>\n<ul>\n<li>\n<p>Basic</p>\n<ul>\n<li>사용자 아이디와 암호를 Base64로 인코딩한 값을 토큰으로 사용</li>\n</ul>\n</li>\n<li>\n<p>Bearer</p>\n<ul>\n<li>JWT 또는 OAuth 에 대한 토큰을 사용</li>\n</ul>\n</li>\n<li>\n<p>Digest</p>\n<ul>\n<li>서버에서 난수 데이터 문자열을 클라이언트에 보냄</li>\n<li>클라이언트는 사용자 정보와 nonce 를 포함하는 해시값을 사용하여 응답</li>\n</ul>\n</li>\n<li>\n<p>HOBA</p>\n<ul>\n<li>전자 서명 기반 인증</li>\n</ul>\n</li>\n<li>\n<p>Mutual</p>\n<ul>\n<li>암호를 이용한 클라이언트-서버 상호 인증</li>\n</ul>\n</li>\n<li>\n<p>AWS4-HMAC-SHA256</p>\n<ul>\n<li>AWS 전자 서명 기반 인증</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"2-refresh-token\" style=\"position:relative;\"><a href=\"#2-refresh-token\" aria-label=\"2 refresh token permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Refresh Token</h1>\n<hr>\n<p><strong>JWT 역시 탈취되면 누구나 API 를 호출할 수 있다는 <a href=\"https://www.notion.so/JWT-6b901ef070744b6bb65fff7f5343fd35\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">단점이</a> 존재.</strong></p>\n<p>세션은 탈취된 경우 세션 저장소에서 탈취된 세션 ID를 삭제하면되지만, JWT 는 서버에서 관리하지 않기 때문에 속수무책으로 당할 수 밖에 없음.</p>\n<p>그래서 탈취되어도 피해가 최소한 되도록 유효시간을 짧게 가져감.</p>\n<p>하지만 만료 시간을 30분으로 설정하면 일반 사용자는 30분마다 새로 로그인하여 토큰을 발급받아야 함.</p>\n<p><strong>사용자가 매번 로그인 하는 과정을 생략하기 위해 필요한게 Refresh Token.</strong></p>\n<h3 id=\"발급-과정\" style=\"position:relative;\"><a href=\"#%EB%B0%9C%EA%B8%89-%EA%B3%BC%EC%A0%95\" aria-label=\"발급 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>발급 과정</h3>\n<ol>\n<li>Refresh Token 은 로그인 토큰(Access Token) 보다 긴 유효 시간을 가지며, Access Token 이 만료된 사용자가 재발급을 원할 경우 Refresh Toekn을 함께 전달함.</li>\n<li>서버는 Access Token 에 담긴 사용자의 정보를 확인하고 Refresh Token 이 아직 만료되지 않았다면, 새로운 토큰을 발급해줌</li>\n</ol>\n<p>위와 같이 하면 매번 로그인해야하는 번거로움 없이 로그인을 지속적으로 유지 할 수 있음.</p>\n<h3 id=\"주의\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9D%98\" aria-label=\"주의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주의</h3>\n<p>Refresh Token 은 사용자가 로그인할 때 같이 발급되며, 클라이언트가 안전한 곳에 보관하고 있어야 함.</p>\n<p>Access Token과 달리 매 요청마다 주고 받지 않기 때문에 탈취 당할 위험이 적으며, 요청 주기가 길기 때문에 별도의 저장소에 보관함. (정책마다 다르게 사용)</p>\n<h2 id=\"21-refresh-token-저장소\" style=\"position:relative;\"><a href=\"#21-refresh-token-%EC%A0%80%EC%9E%A5%EC%86%8C\" aria-label=\"21 refresh token 저장소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 Refresh Token 저장소</h2>\n<hr>\n<p>Refresh Token 은 서버에서 별도의 저장소에 보관하는 것이 좋다.</p>\n<ul>\n<li>Refresh Token 은 사용자 정보가 없기 때문에 저장소에 값이 있으면 검증 시 어떤 사용자의 토큰인지 판단하기 용이</li>\n<li>탈취당했을 때 저장소에서 Refresh Token 정보를 삭제하면 Access Token 만료 후에 재발급이 안되게 강제 로그아웃 처리 가능</li>\n<li>일반적으로 Redis 많이 사용</li>\n</ul>\n<h2 id=\"22-refresh-token-으로-access-token-재발급-시나리오\" style=\"position:relative;\"><a href=\"#22-refresh-token-%EC%9C%BC%EB%A1%9C-access-token-%EC%9E%AC%EB%B0%9C%EA%B8%89-%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4\" aria-label=\"22 refresh token 으로 access token 재발급 시나리오 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2 Refresh Token 으로 Access Token 재발급 시나리오</h2>\n<hr>\n<ol>\n<li>클라이언트는 <code class=\"language-text\">access token</code> 으로 API 요청하며 서비스 제공</li>\n<li><code class=\"language-text\">access token</code> 이 만료되면 서버에서 <code class=\"language-text\">access token</code> 만료 응답을 내려줌</li>\n<li>클라이언트는 access token 만료응답을 받고 재발급을 위해 <code class=\"language-text\">access token + refresh token</code> 을 함께 보냄</li>\n<li>서버는 <code class=\"language-text\">refresh token</code> 의 만료 여부를 확인</li>\n<li><code class=\"language-text\">acces token</code> 으로 유저 정보(username 또는 userid) 를 획득하고 저장소에 해당 유저 정보를 key 값으로 한 value 가 <code class=\"language-text\">refresh token</code> 과 일치하는지 확인</li>\n<li>4 - 5 번의 검증이 끝나면 새로운 토큰 세트 (access + refresh ) 발급</li>\n<li>서버는 <code class=\"language-text\">refresh token</code> 저장소의 value 업데이트</li>\n</ol>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://jwt.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JWT Token 확인 가능한 사이트</a></li>\n<li><a href=\"https://bcp0109.tistory.com/321\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">참고한 블로그</a></li>\n</ul>","excerpt":"1. JWT (Json Web Token)란? JSON 객체를 사용해서 토큰 자체에 정보를 저장하는 Web Token Header, Payload, Signature 3개 부분으로 구성됨. 쿠키나 세션을 이용한 인증보다 안전하고 효율적임 일반적으로는…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/json-web-token/#1-jwt-json-web-token%EB%9E%80\">1. JWT (Json Web Token)란?</a></p>\n<ul>\n<li><a href=\"/json-web-token/#11-%EC%9E%A5%EB%8B%A8%EC%A0%90\">1.1 장단점</a></li>\n<li><a href=\"/json-web-token/#12-token-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C\">1.2 Token 구성요소</a></li>\n<li><a href=\"/json-web-token/#13-%ED%86%A0%ED%81%B0-%EC%9D%B8%EC%A6%9D-%ED%83%80%EC%9E%85\">1.3 토큰 인증 타입</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/json-web-token/#2-refresh-token\">2. Refresh Token</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/json-web-token/#%EB%B0%9C%EA%B8%89-%EA%B3%BC%EC%A0%95\">발급 과정</a></li>\n<li><a href=\"/json-web-token/#%EC%A3%BC%EC%9D%98\">주의</a></li>\n</ul>\n</li>\n<li><a href=\"/json-web-token/#21-refresh-token-%EC%A0%80%EC%9E%A5%EC%86%8C\">2.1 Refresh Token 저장소</a></li>\n<li><a href=\"/json-web-token/#22-refresh-token-%EC%9C%BC%EB%A1%9C-access-token-%EC%9E%AC%EB%B0%9C%EA%B8%89-%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4\">2.2 Refresh Token 으로 Access Token 재발급 시나리오</a></li>\n<li><a href=\"/json-web-token/#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/json-web-token/"},"frontmatter":{"title":"Json Web Token(JWT) 란?","date":"Jan 10, 2022","tags":["보안","Token"],"keywords":["Json","JWT","Token","Security"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/json-web-token/","series":[],"lastmod":"2022-01-10"}},"staticQueryHashes":["2027115977","694178885"]}