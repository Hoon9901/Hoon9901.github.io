{"componentChunkName":"component---src-templates-post-tsx","path":"/bean_custom_method/","result":{"data":{"markdownRemark":{"html":"<p>모든 클래스가 <code class=\"language-text\">InitializingBean</code>, <code class=\"language-text\">DisposableBean</code> 인터페이스를 상속받아 구현할 수 있는 것은 아니다. </p>\n<p>외부에서 제공받은 클래스(외부 라이브러리 등)를 스프링 <code class=\"language-text\">Bean</code> 객체로 설정하고 싶을 때도 있다. 이 경우에는 소스코드를 수정하지 않는 이상 두 인터페이스를 구현할 수 없다. </p>\n<p>이렇게 해당 인터페이스를 구현할 수 없거나 이 두 인터페이스를 사용하고 싶지 않은 경우에는 스프링 설정에서 직접 메소드를 지정할 수 있다.</p>\n<h2 id=\"1-bean-태그-속성으로-메소드-지정\" style=\"position:relative;\"><a href=\"#1-bean-%ED%83%9C%EA%B7%B8-%EC%86%8D%EC%84%B1%EC%9C%BC%EB%A1%9C-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%A7%80%EC%A0%95\" aria-label=\"1 bean 태그 속성으로 메소드 지정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. @Bean 태그 속성으로 메소드 지정</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client2</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> host<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> host<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>host <span class=\"token operator\">=</span> host<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Client2.connect() 실행\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Client2.send() to \"</span> <span class=\"token operator\">+</span> host<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Client2.close() 실행\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Clien2</code> 클래스를 빈으로 사용하려면(Client2가 외부 라이브러리에서 제공하는 클라이언트 인 경우도 포함) 초기화 과정에서 <code class=\"language-text\">connect()</code> 메소드를 실행하고 소멸 과정에서 <code class=\"language-text\">close()</code> 메소드를 실행해야 한다면 다음과 같이 <code class=\"language-text\">@Bean</code> 어노테이션의 속성을 지정해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>initMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"connect\"</span><span class=\"token punctuation\">,</span> destroyMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"close\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Client2</span> <span class=\"token function\">client2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Client2</span> client2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Client2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        client2<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"외부 라이브러리\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> client2<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">initMethod</code> 속성 : 초기화 과정에 사용할 메소드 이름 지정</li>\n<li><code class=\"language-text\">destoryMethod</code> 속성 : 소멸 과정에 사용할 메소드 이름 지정</li>\n</ul>\n<p>⚠️ <code class=\"language-text\">initMethod</code>, <code class=\"language-text\">destroyMethod</code> 속성에 지정한 메소드는 파라미터가 없어야한다.\n파라미터가 존재할 경우 스프링 컨테이너는 예외를 발생시킨다.</p>\n<p>위 설정을 추가한뒤 스프링을 실행하자.\n다음과 같이 <code class=\"language-text\">Clien2</code>  빈 객체를 위한 초기화/소멸 메소드가 실행된 것을 알 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Client2</span><span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 실행\n<span class=\"token number\">7</span>월 <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2022</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">09</span><span class=\"token operator\">:</span><span class=\"token number\">53</span> 오전 org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span><span class=\"token class-name\">AbstractApplicationContext</span> doClose\n정보<span class=\"token operator\">:</span> <span class=\"token class-name\">Closing</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span><span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token annotation punctuation\">@4b952a2d</span><span class=\"token operator\">:</span> startup date <span class=\"token punctuation\">[</span><span class=\"token class-name\">Fri</span> <span class=\"token class-name\">Jul</span> <span class=\"token number\">22</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span><span class=\"token number\">09</span><span class=\"token operator\">:</span><span class=\"token number\">53</span> KST <span class=\"token number\">2022</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> root of context hierarchy\n<span class=\"token class-name\">Client2</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 실행\n<span class=\"token class-name\">Client</span><span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 실행<span class=\"token punctuation\">]</span></code></pre></div>\n<h2 id=\"2-빈-설정-메소드에서-직접-초기화\" style=\"position:relative;\"><a href=\"#2-%EB%B9%88-%EC%84%A4%EC%A0%95-%EB%A9%94%EC%86%8C%EB%93%9C%EC%97%90%EC%84%9C-%EC%A7%81%EC%A0%91-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-label=\"2 빈 설정 메소드에서 직접 초기화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 빈 설정 메소드에서 직접 초기화</h2>\n<p>설정 클래스는 자바 코드이므로 <code class=\"language-text\">initMethod</code> 속성을 사용하는 대신 다음과 같이 빈 설정 메서드에서 직접 초기화를 수행해도 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>destroyMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"close\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Client2</span> <span class=\"token function\">client3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Client2</span> client2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Client2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        client2<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"외부 라이브러리\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">*</span><span class=\"token operator\">*</span>client2<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 직접 초기화 메소드 호출**</span>\n        <span class=\"token keyword\">return</span> client2<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"3-설정-코드에서-커스텀-초기화-메소드-실행-시-주의할점\" style=\"position:relative;\"><a href=\"#3-%EC%84%A4%EC%A0%95-%EC%BD%94%EB%93%9C%EC%97%90%EC%84%9C-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%B4%88%EA%B8%B0%ED%99%94-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%8B%A4%ED%96%89-%EC%8B%9C-%EC%A3%BC%EC%9D%98%ED%95%A0%EC%A0%90\" aria-label=\"3 설정 코드에서 커스텀 초기화 메소드 실행 시 주의할점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 설정 코드에서 커스텀 초기화 메소드 실행 시 주의할점</h2>\n<p>초기화 메소드가 두번 불리지 않도록 하는 것</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\t\t<span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Client</span> <span class=\"token function\">client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Client</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// initializingBean 구현체임</span>\n        client<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"외부 라이브러리\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        client<span class=\"token punctuation\">.</span><span class=\"token function\">afterPropertieset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> client2<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 코드는 빈 설정 메소드에서 <code class=\"language-text\">afterProperitesSet()</code> 메소드를 호출한다. 그런데 <code class=\"language-text\">Client</code> 클래스는 <code class=\"language-text\">InitalizingBean</code> 인터페이스를 구현했기 때문에 스프링 컨테이너는 빈 객체 생성 이후 <code class=\"language-text\">afterPropertiesSet()</code>메소드를 실행한다. 즉 해당 메소드가 두번 호출되는 것이다.</p>\n<p>초기화 관련 메소드를 빈 설정 코드에서 직접 실행할 때는 이렇게 초기화 메소드가 두번 호출되지 않도록 주의해야한다.</p>","excerpt":"모든 클래스가 ,  인터페이스를 상속받아 구현할 수 있는 것은 아니다.  외부에서 제공받은 클래스(외부 라이브러리 등)를 스프링  객체로 설정하고 싶을 때도 있다. 이 경우에는 소스코드를 수정하지 않는 이상 두 인터페이스를 구현할 수 없다.  이렇게…","tableOfContents":"<ul>\n<li><a href=\"/bean_custom_method/#1-bean-%ED%83%9C%EA%B7%B8-%EC%86%8D%EC%84%B1%EC%9C%BC%EB%A1%9C-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%A7%80%EC%A0%95\">1. @Bean 태그 속성으로 메소드 지정</a></li>\n<li><a href=\"/bean_custom_method/#2-%EB%B9%88-%EC%84%A4%EC%A0%95-%EB%A9%94%EC%86%8C%EB%93%9C%EC%97%90%EC%84%9C-%EC%A7%81%EC%A0%91-%EC%B4%88%EA%B8%B0%ED%99%94\">2. 빈 설정 메소드에서 직접 초기화</a></li>\n<li><a href=\"/bean_custom_method/#3-%EC%84%A4%EC%A0%95-%EC%BD%94%EB%93%9C%EC%97%90%EC%84%9C-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%B4%88%EA%B8%B0%ED%99%94-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%8B%A4%ED%96%89-%EC%8B%9C-%EC%A3%BC%EC%9D%98%ED%95%A0%EC%A0%90\">3. 설정 코드에서 커스텀 초기화 메소드 실행 시 주의할점</a></li>\n</ul>","fields":{"slug":"/bean_custom_method/"},"frontmatter":{"title":"[Spring] InitializingBean, DisposableBean 구현없이 초기화/소멸 메소드 실행하기","date":"Jul 22, 2022","tags":["Spring"],"keywords":["스프링","스프링부트","SpringBoot","InitializingBean","DisposableBean"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/bean_custom_method/","series":[],"lastmod":"2022-07-22"}},"staticQueryHashes":["2027115977","694178885"]}