{"componentChunkName":"component---src-templates-post-tsx","path":"/springboot-jwt-tutorial3/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"1-jwt-설정추가\" style=\"position:relative;\"><a href=\"#1-jwt-%EC%84%A4%EC%A0%95%EC%B6%94%EA%B0%80\" aria-label=\"1 jwt 설정추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. JWT 설정추가</h1>\n<p>application.yml 파일을 열고, jwt 설정을 추가하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">jwt</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">header</span><span class=\"token punctuation\">:</span> Authorization\n  <span class=\"token comment\">#HS512 알고리즘을 사용할 것이기 때문에 512bit, 즉 64byte 이상의 secret key를 사용해야 한다.</span>\n  <span class=\"token comment\">#echo 'silvernine-tech-spring-boot-jwt-tutorial-secret-silvernine-tech-spring-boot-jwt-tutorial-secret'|base64</span>\n  <span class=\"token key atrule\">secret</span><span class=\"token punctuation\">:</span> c2lsdmVybmluZS10ZWNoLXNwcmluZy1ib290LWp3dC10dXRvcmlhbC1zZWNyZXQtc2lsdmVybmluZS10ZWNoLXNwcmluZy1ib290LWp3dC10dXRvcmlhbC1zZWNyZXQK\n  <span class=\"token key atrule\">token-validity-in-seconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">86400</span></code></pre></div>\n<ul>\n<li>header : JWT를 검증하는데 필요한 정보</li>\n<li>\n<p>secret : HS512 알고리즘을 사용할 것이기 때문에 512bit, 즉 64byte 이상의 secret key를 사용해야 한다</p>\n<ul>\n<li>위 예제에서는 Secret Key 를 Base64 로 인코딩한 값임.</li>\n</ul>\n</li>\n<li>token-validity-in-seconds : 토큰의 만료시간을 지정함 (단위는 초)</li>\n</ul>\n<p>이제 build.gradle 파일로 가서 JWT 관련 라이브러리를 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">implementation group<span class=\"token punctuation\">:</span> <span class=\"token string\">'io.jsonwebtoken'</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'jjwt-api'</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'0.11.2'</span>\nruntimeOnly group<span class=\"token punctuation\">:</span> <span class=\"token string\">'io.jsonwebtoken'</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'jjwt-impl'</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'0.11.2'</span>\nruntimeOnly group<span class=\"token punctuation\">:</span> <span class=\"token string\">'io.jsonwebtoken'</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'jjwt-jackson'</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'0.11.2'</span></code></pre></div>\n<p>그 후 그래들을 다시 불러와, 프로젝트에 의존성을 설치해줍니다. </p>\n<p>JWT 개발을 위한 준비는 완료되었고 이제 JWT 코드를 개발하겠습니다.</p>\n<h1 id=\"2-jwt-관련-코드-작성\" style=\"position:relative;\"><a href=\"#2-jwt-%EA%B4%80%EB%A0%A8-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1\" aria-label=\"2 jwt 관련 코드 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. JWT 관련 코드 작성</h1>\n<h2 id=\"tokenprovider-클래스\" style=\"position:relative;\"><a href=\"#tokenprovider-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"tokenprovider 클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TokenProvider 클래스</h2>\n<p>jwt 패키지를 생성하고, 토큰의 생성과 토큰의 유효성 검증등을 담당할 Token Provider 를 만들겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TokenProvider</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InitializingBean</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TokenProvider</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> AUTHORITIES_KEY <span class=\"token operator\">=</span> <span class=\"token string\">\"auth\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> secret<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> tokenValidityInMilliseconds<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Key</span> key<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TokenProvider</span><span class=\"token punctuation\">(</span>\n            <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${jwt.secret}\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> secret<span class=\"token punctuation\">,</span>\n            <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${jwt.token-validity-in-seconds}\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">long</span> tokenValidityInSeconds<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>secret <span class=\"token operator\">=</span> secret<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tokenValidityInMilliseconds <span class=\"token operator\">=</span> tokenValidityInSeconds <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> keyBytes <span class=\"token operator\">=</span> <span class=\"token class-name\">Decoders</span><span class=\"token punctuation\">.</span>BASE64<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>secret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> <span class=\"token class-name\">Keys</span><span class=\"token punctuation\">.</span><span class=\"token function\">hmacShaKeyFor</span><span class=\"token punctuation\">(</span>keyBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">InitializingBean</code>  인터페이스를 구현하여, <code class=\"language-text\">afterPropertiesSet</code> 메소드를 Override 한 이유는</p>\n<p>Bean이 생성이 되고, 의존성 주입을 받은 후에 secret 값을 Base64 Decode 해서 key 변수에 할당합니다.</p>\n<h3 id=\"createtoken-메소드\" style=\"position:relative;\"><a href=\"#createtoken-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"createtoken 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>createToken 메소드</h3>\n<p>Authentication 객체의 권한정보를 이용해서 토큰을 생성하는 createToken 메소드를 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">createToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Authentication</span> authentication<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">String</span> authorities <span class=\"token operator\">=</span> authentication<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthorities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GrantedAuthority</span><span class=\"token operator\">::</span><span class=\"token function\">getAuthority</span><span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">long</span> now <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">Date</span> validity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>now <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tokenValidityInMilliseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token class-name\">Jwts</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">.</span><span class=\"token function\">setSubject</span><span class=\"token punctuation\">(</span>authentication<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">.</span><span class=\"token function\">claim</span><span class=\"token punctuation\">(</span>AUTHORITIES_KEY<span class=\"token punctuation\">,</span> authorities<span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">.</span><span class=\"token function\">signWith</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SignatureAlgorithm</span><span class=\"token punctuation\">.</span>HS512<span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">.</span><span class=\"token function\">setExpiration</span><span class=\"token punctuation\">(</span>validity<span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">.</span><span class=\"token function\">compact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span></code></pre></div>\n<p>authenticaion 객체를 받아서 권한 설정을 하고, application.yml 에서 설정했던 토큰 만료시간을 설정하고 토큰을 생성합니다.</p>\n<h3 id=\"getauthenticaion-메소드\" style=\"position:relative;\"><a href=\"#getauthenticaion-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"getauthenticaion 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getAuthenticaion 메소드</h3>\n<p>token을 매개변수로 받아서, 토큰에 담긴 정보를 이용해 Authenticaion 객체를 리턴하는 메소드를 작성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Authentication</span> <span class=\"token function\">getAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">Claims</span> claims <span class=\"token operator\">=</span> <span class=\"token class-name\">Jwts</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">parserBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">setSigningKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">parseClaimsJws</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GrantedAuthority</span><span class=\"token punctuation\">></span></span> authorities <span class=\"token operator\">=</span>\n         <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>AUTHORITIES_KEY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SimpleGrantedAuthority</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token class-name\">User</span> principal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">.</span><span class=\"token function\">getSubject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> authorities<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">(</span>principal<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">,</span> authorities<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span></code></pre></div>\n<p>token으로 클레임을 만들고, 클레임에서 권한정보를 받아서 유저 객체를 만들어서 최종적으로 Authenticaion 객체를 리턴합니다.</p>\n<ul>\n<li>Claims : JWT 의 속성정보, java 에서 Claims 는 Json map 형식의 인터페이스임</li>\n</ul>\n<h3 id=\"validatetoken-메소드\" style=\"position:relative;\"><a href=\"#validatetoken-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"validatetoken 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>validateToken 메소드</h3>\n<p>token을 매개변수로 받아서, 토큰의 유효성 검증을 수행하는 validateToken 메소드를 작성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">validateToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token class-name\">Jwts</span><span class=\"token punctuation\">.</span><span class=\"token function\">parserBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setSigningKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseClaimsJws</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">.</span>jsonwebtoken<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span><span class=\"token class-name\">SecurityException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">MalformedJwtException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"잘못된 JWT 서명입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ExpiredJwtException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"만료된 JWT 토큰입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UnsupportedJwtException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"지원되지 않는 JWT 토큰입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalArgumentException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JWT 토큰이 잘못되었습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span></code></pre></div>\n<p>토큰을 파싱하고, 발생하는 예외들을 캐치하여, 문제가 있음면 false, 정상이면 true를 리턴합니다.</p>\n<h2 id=\"jwtfilter-클래스\" style=\"position:relative;\"><a href=\"#jwtfilter-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"jwtfilter 클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JwtFilter 클래스</h2>\n<p>JWT를 위한 커스텀 필터를 만들기 위해 JwtFilter 클래스를 생성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JwtFilter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GenericFilterBean</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JwtFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> AUTHORIZATION_HEADER <span class=\"token operator\">=</span> <span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TokenProvider</span> tokenProvider<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JwtFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TokenProvider</span> tokenProvider<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tokenProvider <span class=\"token operator\">=</span> tokenProvider<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> servletRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> servletResponse<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> filterChain<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">{</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>doFilter : JWT 토큰의 인증정보를 현재 실행중인 SecurityContext 에 저장하는 역활</li>\n</ul>\n<p>GenericFilterBean을 상속받아 doFilter 메소드를 Override.</p>\n<p>실제 필터링 로직은 doFilter 내부에 작성합니다.</p>\n<h3 id=\"resolvetoken-메소드\" style=\"position:relative;\"><a href=\"#resolvetoken-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"resolvetoken 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>resolveToken 메소드</h3>\n<p>Request Header 에서 토큰정보를 가져오기 위한, resolveToken 메소드를 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">resolveToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">String</span> bearerToken <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span>AUTHORIZATION_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasText</span><span class=\"token punctuation\">(</span>bearerToken<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> bearerToken<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bearer \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">return</span> bearerToken<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"dofilter-메소드-내부-로직\" style=\"position:relative;\"><a href=\"#dofilter-%EB%A9%94%EC%86%8C%EB%93%9C-%EB%82%B4%EB%B6%80-%EB%A1%9C%EC%A7%81\" aria-label=\"dofilter 메소드 내부 로직 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>doFilter 메소드 내부 로직</h3>\n<p> doFilter의 내부 로직을 작성하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"clike\"><pre class=\"language-clike\"><code class=\"language-clike\">HttpServletRequest httpServletRequest <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HttpServletRequest<span class=\"token punctuation\">)</span> servletRequest<span class=\"token punctuation\">;</span>\n      String jwt <span class=\"token operator\">=</span> <span class=\"token function\">resolveToken</span><span class=\"token punctuation\">(</span>httpServletRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      String requestURI <span class=\"token operator\">=</span> httpServletRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestURI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>StringUtils<span class=\"token punctuation\">.</span><span class=\"token function\">hasText</span><span class=\"token punctuation\">(</span>jwt<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> tokenProvider<span class=\"token punctuation\">.</span><span class=\"token function\">validateToken</span><span class=\"token punctuation\">(</span>jwt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         Authentication authentication <span class=\"token operator\">=</span> tokenProvider<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthentication</span><span class=\"token punctuation\">(</span>jwt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         SecurityContextHolder<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAuthentication</span><span class=\"token punctuation\">(</span>authentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Security Context에 '{}' 인증 정보를 저장했습니다, uri: {}\"</span><span class=\"token punctuation\">,</span> authentication<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestURI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n         logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"유효한 JWT 토큰이 없습니다, uri: {}\"</span><span class=\"token punctuation\">,</span> requestURI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>servletRequest<span class=\"token punctuation\">,</span> servletResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>resolveToken 을 통해 토큰을 받아와서 유효성 검증을 하고 토큰이 정상적이면 Authenticaion 객체를 받아와서 </p>\n<p>SecurityContext 에 저장합니다.</p>\n<h2 id=\"jwtsecurityconfig-클래스\" style=\"position:relative;\"><a href=\"#jwtsecurityconfig-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"jwtsecurityconfig 클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JwtSecurityConfig 클래스</h2>\n<p>TokenProvider, JwtFilter 를 SecurityConfig에 적용할때 사용할 JwtSecurityConfig 클래스를 생성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JwtSecurityConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SecurityConfigurerAdapter</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DefaultSecurityFilterChain</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpSecurity</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TokenProvider</span> tokenProvider<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JwtSecurityConfig</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TokenProvider</span> tokenProvider<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tokenProvider <span class=\"token operator\">=</span> tokenProvider<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSecurity</span> http<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">JwtFilter</span> customFilter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JwtFilter</span><span class=\"token punctuation\">(</span>tokenProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        http<span class=\"token punctuation\">.</span><span class=\"token function\">addFilterBefore</span><span class=\"token punctuation\">(</span>customFilter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UsernamePasswordAuthenticationFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>SecurityConfigurerAdapter를 상속받고 TokenProvider를 주입받아서 configure 메소드를 Override 하여 JwtFilter를 통해 Security 로직에 필터를 등록합니다.</p>\n<h2 id=\"jwtauthenticationentrypoint-클래스\" style=\"position:relative;\"><a href=\"#jwtauthenticationentrypoint-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"jwtauthenticationentrypoint 클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JwtAuthenticationEntryPoint 클래스</h2>\n<p>유효한 자격증명을 제공하지 않고 접근하려 할때 401 Unauthorized 에러를 리턴할 JwtAuthenticationEntryPoint 클래스를 생성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JwtAuthenticationEntryPoint</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AuthenticationEntryPoint</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">commence</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span>\n                         <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span>\n                         <span class=\"token class-name\">AuthenticationException</span> authException<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 유효한 자격증명을 제공하지 않고 접근하려 할때 401</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">sendError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">.</span>SC_UNAUTHORIZED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>AuthneticaionEntryPoint 를 구현하고, commence 메소드를 Override 합니다</p>\n<p>이 클래스는 유효하지 않는 자격증명은 401 에러를 전송하는 클래스입니다.</p>\n<h2 id=\"jwtaccessdeniedhandler-클래스\" style=\"position:relative;\"><a href=\"#jwtaccessdeniedhandler-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"jwtaccessdeniedhandler 클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JwtAccessDeniedHandler 클래스</h2>\n<p>필요한 권한이 존재하지 않는 경우에 403 Forbidden 에러를 리턴하기 위해 JwtAccessDeniedHandler 클래스를 생성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JwtAccessDeniedHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccessDeniedHandler</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AccessDeniedException</span> accessDeniedException<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//필요한 권한이 없이 접근하려 할때 403</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">sendError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">.</span>SC_FORBIDDEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>AccessDeniedHandler를 구현하하고, handle 메소드를 Override합니다.</p>\n<p>필요한 권한이 없이 접근할때 403 에러를 리턴합니다.</p>\n<h1 id=\"3-security-설정-추가\" style=\"position:relative;\"><a href=\"#3-security-%EC%84%A4%EC%A0%95-%EC%B6%94%EA%B0%80\" aria-label=\"3 security 설정 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Security 설정 추가</h1>\n<h2 id=\"securityconfig-에-추가\" style=\"position:relative;\"><a href=\"#securityconfig-%EC%97%90-%EC%B6%94%EA%B0%80\" aria-label=\"securityconfig 에 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SecurityConfig 에 추가</h2>\n<p>이제 만들었던 5개의 클래스를 SecurityConfig 에 적용하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@EnableWebSecurity</span>\n<span class=\"token annotation punctuation\">@EnableGlobalMethodSecurity</span><span class=\"token punctuation\">(</span>prePostEnabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SecurityConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WebSecurityConfigurerAdapter</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">TokenProvider</span> tokenProvider<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">JwtAuthenticationEntryPoint</span> jwtAuthenticationEntryPoint<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">JwtAccessDeniedHandler</span> jwtAccessDeniedHandler<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SecurityConfig</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">TokenProvider</span> tokenProvider<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">JwtAuthenticationEntryPoint</span> jwtAuthenticationEntryPoint<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">JwtAccessDeniedHandler</span> jwtAccessDeniedHandler\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tokenProvider <span class=\"token operator\">=</span> tokenProvider<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>jwtAuthenticationEntryPoint <span class=\"token operator\">=</span> jwtAuthenticationEntryPoint<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>jwtAccessDeniedHandler <span class=\"token operator\">=</span> jwtAccessDeniedHandler<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PasswordEncoder</span> <span class=\"token function\">passwordEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BCryptPasswordEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebSecurity</span> web<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        web<span class=\"token punctuation\">.</span><span class=\"token function\">ignoring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span>\n                        <span class=\"token string\">\"/h2-console/**\"</span>\n                        <span class=\"token punctuation\">,</span><span class=\"token string\">\"/favicon.ico\"</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSecurity</span> httpSecurity<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        httpSecurity\n                <span class=\"token comment\">// token을 사용하는 방식이기 때문에 csrf를 disable합니다.</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">csrf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n                <span class=\"token punctuation\">.</span><span class=\"token function\">exceptionHandling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">authenticationEntryPoint</span><span class=\"token punctuation\">(</span>jwtAuthenticationEntryPoint<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">accessDeniedHandler</span><span class=\"token punctuation\">(</span>jwtAccessDeniedHandler<span class=\"token punctuation\">)</span>\n\n                <span class=\"token comment\">// enable h2-console</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">frameOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">sameOrigin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n                <span class=\"token comment\">// 세션을 사용하지 않기 때문에 STATELESS로 설정</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">sessionManagement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">sessionCreationPolicy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionCreationPolicy</span><span class=\"token punctuation\">.</span>STATELESS<span class=\"token punctuation\">)</span>\n\n                <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">authorizeRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">permitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/authenticate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">permitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/signup\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">permitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n                <span class=\"token punctuation\">.</span><span class=\"token function\">anyRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n                <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JwtSecurityConfig</span><span class=\"token punctuation\">(</span>tokenProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">@EnableGlobalMethodSecurity</code> : @PreAuthorize 어노테이션을 메소드 단위로 추가한다</li>\n</ul>\n<p>SecurityConfig는 TokenProvider, JwtAuthenticaionEntryPoint, JwtAccessDeniedHandler 를 주입받습니다. </p>\n<p>passwordEncoder로 BCryptPasswordEncoder를 사용합니다.</p>\n<p>configure 메소드에서 많은 부분이 추가됬는데(HttpSecurity 매개인자) </p>\n<p>일단 토큰을 사용하기 때문에 csrf 는 disable 합니다 Exception을 핸들링할때 우리가 작성한 클래스를 추가합니다.</p>\n<p>그리고 h2-console 을 위한 설정들을 추가해줬고, 우리는 세션을 사용하지 않기 때문에 세션 설정을 STATELESS로 설정합니다.</p>\n<p>로그인 API, 회원가입 API 는 토큰이 없는 상태에서 요청이 들어오기 때문에 모두 permitAll 설정을 해줬습니다.</p>\n<p>마지막으로 JwtFilter를 addFilterBefore로 등록했던 JwtSecurityConfig 클래스도 적용해줍니다.</p>\n<h3 id=\"서버-실행\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B2%84-%EC%8B%A4%ED%96%89\" aria-label=\"서버 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서버 실행</h3>\n<p>서버를 최종적으로 실행하면 아무 오류없이 잘 실행되는 것을 볼수있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">10</span> <span class=\"token number\">20</span><span class=\"token operator\">:</span><span class=\"token number\">36</span><span class=\"token operator\">:</span><span class=\"token number\">56.570</span>  INFO <span class=\"token number\">44384</span> <span class=\"token operator\">--</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span>           main<span class=\"token punctuation\">]</span> o<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">.</span>embedded<span class=\"token punctuation\">.</span>tomcat<span class=\"token punctuation\">.</span><span class=\"token class-name\">TomcatWebServer</span>  <span class=\"token operator\">:</span> <span class=\"token class-name\">Tomcat</span> started on <span class=\"token function\">port</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token number\">8080</span> <span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">)</span> <span class=\"token keyword\">with</span> <span class=\"token namespace\">context</span> path <span class=\"token string\">''</span>\n<span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">10</span> <span class=\"token number\">20</span><span class=\"token operator\">:</span><span class=\"token number\">36</span><span class=\"token operator\">:</span><span class=\"token number\">56.575</span>  INFO <span class=\"token number\">44384</span> <span class=\"token operator\">--</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span>           main<span class=\"token punctuation\">]</span> c<span class=\"token punctuation\">.</span>e<span class=\"token punctuation\">.</span>jwttutorial<span class=\"token punctuation\">.</span><span class=\"token class-name\">JwtTutorialApplication</span>   <span class=\"token operator\">:</span> <span class=\"token class-name\">Started</span> <span class=\"token class-name\">JwtTutorialApplication</span> in <span class=\"token number\">2.078</span> seconds <span class=\"token punctuation\">(</span>JVM running <span class=\"token keyword\">for</span> <span class=\"token number\">2.671</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이제 JWT 설정 추가, JWT 관련 코드 개발, Security 설정 추가하는 작업이 완료되었습니다.</p>\n<p>다음편에서는 DB와 연결하는 Repository를 만들고 로그인 API 를 구현하겠습니다.</p>","excerpt":"1. JWT 설정추가 application.yml 파일을 열고, jwt 설정을 추가하겠습니다. header : JWT를 검증하는데 필요한 정보 secret : HS512 알고리즘을 사용할 것이기 때문에 512bit, 즉 64byte 이상의 secre…","tableOfContents":"<ul>\n<li><a href=\"/springboot-jwt-tutorial3/#1-jwt-%EC%84%A4%EC%A0%95%EC%B6%94%EA%B0%80\">1. JWT 설정추가</a></li>\n<li>\n<p><a href=\"/springboot-jwt-tutorial3/#2-jwt-%EA%B4%80%EB%A0%A8-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1\">2. JWT 관련 코드 작성</a></p>\n<ul>\n<li>\n<p><a href=\"/springboot-jwt-tutorial3/#tokenprovider-%ED%81%B4%EB%9E%98%EC%8A%A4\">TokenProvider 클래스</a></p>\n<ul>\n<li><a href=\"/springboot-jwt-tutorial3/#createtoken-%EB%A9%94%EC%86%8C%EB%93%9C\">createToken 메소드</a></li>\n<li><a href=\"/springboot-jwt-tutorial3/#getauthenticaion-%EB%A9%94%EC%86%8C%EB%93%9C\">getAuthenticaion 메소드</a></li>\n<li><a href=\"/springboot-jwt-tutorial3/#validatetoken-%EB%A9%94%EC%86%8C%EB%93%9C\">validateToken 메소드</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/springboot-jwt-tutorial3/#jwtfilter-%ED%81%B4%EB%9E%98%EC%8A%A4\">JwtFilter 클래스</a></p>\n<ul>\n<li><a href=\"/springboot-jwt-tutorial3/#resolvetoken-%EB%A9%94%EC%86%8C%EB%93%9C\">resolveToken 메소드</a></li>\n<li><a href=\"/springboot-jwt-tutorial3/#dofilter-%EB%A9%94%EC%86%8C%EB%93%9C-%EB%82%B4%EB%B6%80-%EB%A1%9C%EC%A7%81\">doFilter 메소드 내부 로직</a></li>\n</ul>\n</li>\n<li><a href=\"/springboot-jwt-tutorial3/#jwtsecurityconfig-%ED%81%B4%EB%9E%98%EC%8A%A4\">JwtSecurityConfig 클래스</a></li>\n<li><a href=\"/springboot-jwt-tutorial3/#jwtauthenticationentrypoint-%ED%81%B4%EB%9E%98%EC%8A%A4\">JwtAuthenticationEntryPoint 클래스</a></li>\n<li><a href=\"/springboot-jwt-tutorial3/#jwtaccessdeniedhandler-%ED%81%B4%EB%9E%98%EC%8A%A4\">JwtAccessDeniedHandler 클래스</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/springboot-jwt-tutorial3/#3-security-%EC%84%A4%EC%A0%95-%EC%B6%94%EA%B0%80\">3. Security 설정 추가</a></p>\n<ul>\n<li>\n<p><a href=\"/springboot-jwt-tutorial3/#securityconfig-%EC%97%90-%EC%B6%94%EA%B0%80\">SecurityConfig 에 추가</a></p>\n<ul>\n<li><a href=\"/springboot-jwt-tutorial3/#%EC%84%9C%EB%B2%84-%EC%8B%A4%ED%96%89\">서버 실행</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/springboot-jwt-tutorial3/"},"frontmatter":{"title":"SpringBoot JWT 튜토리얼 - 3장 JWT코드, Security 설정 추가","date":"Jan 12, 2022","tags":["SpringBoot","JWT","튜토리얼"],"keywords":["스프링","스프링부트","SpringBoot","JWT","튜토리얼","Tutorial"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/springboot-jwt-tutorial3/","series":[],"lastmod":"2022-01-12"}},"staticQueryHashes":["2027115977","694178885"]}