{"componentChunkName":"component---src-templates-post-tsx","path":"/autowired_and_manual_injection/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"configuration--클래스에서-의존-주입명시적-주입을-했는데-자동-주입-대상이면-어떻게-될까\" style=\"position:relative;\"><a href=\"#configuration--%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90%EC%84%9C-%EC%9D%98%EC%A1%B4-%EC%A3%BC%EC%9E%85%EB%AA%85%EC%8B%9C%EC%A0%81-%EC%A3%BC%EC%9E%85%EC%9D%84-%ED%96%88%EB%8A%94%EB%8D%B0-%EC%9E%90%EB%8F%99-%EC%A3%BC%EC%9E%85-%EB%8C%80%EC%83%81%EC%9D%B4%EB%A9%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%90%A0%EA%B9%8C\" aria-label=\"configuration  클래스에서 의존 주입명시적 주입을 했는데 자동 주입 대상이면 어떻게 될까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@Configuration  클래스에서 의존 주입(명시적 주입)을 했는데 자동 주입 대상이면 어떻게 될까?</h1>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberInfoPrinter</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t\n\t<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token annotation punctuation\">@Autowired</span> <span class=\"token comment\">// 자동 주입**</span>\n\t<span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"printer\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setPrinter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MemberPrinter</span> printer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>printer <span class=\"token operator\">=</span> printer<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>MemberInfoPrinter 클래스의 setPrinter 메소드는 위와 같이 @Autowired 어노테이션이 붙어 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppCtx</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t\n\t<span class=\"token annotation punctuation\">@Bean</span>\n\t<span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"printer\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">MemberPrinter</span> <span class=\"token function\">memberPrinter1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemberPrinter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Bean</span>\n\t<span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"summaryPrinter\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">MemberSummaryPrinter</span> <span class=\"token function\">memberPrinter2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemberSummaryPrinter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token annotation punctuation\">@Bean</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">MemberList</span> <span class=\"token function\">listPrinter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemberListPrinter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Bean</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">MemberInfoPrinter</span> <span class=\"token function\">infoPrinter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">MemberInfoPrinter</span> infoPrinter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemberInfoPrinter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">*</span><span class=\"token operator\">*</span>infoPrinter<span class=\"token punctuation\">.</span><span class=\"token function\">setPrinter</span><span class=\"token punctuation\">(</span><span class=\"token function\">memberPrinter2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 세터로 의존 주입**</span>\n\t\t<span class=\"token keyword\">return</span> infoPrinter<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">infoPrinter()</code> 메소드는 <code class=\"language-text\">MemberInfoPrinter</code> 클래스의 <code class=\"language-text\">setPrinter()</code> 메소드를 호출해서 <code class=\"language-text\">memberPrinter2</code> <code class=\"language-text\">Bean</code>(<strong>이메일과 이름만 출력한다</strong>)을 주입한다.</p>\n<p>이 상태에서 Spring 애플리케이션을 실행하고 info 명령어를 실행해보자.</p>\n<p>그러면 과연 info 명령어를 실행하였을 때 이메일과 이름만을 출력할까?</p>\n<h3 id=\"출력-결과\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EB%A0%A5-%EA%B2%B0%EA%B3%BC\" aria-label=\"출력 결과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출력 결과</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">명령어를 입력하세요<span class=\"token operator\">:</span>\n<span class=\"token keyword\">new</span> a<span class=\"token annotation punctuation\">@b.c</span> <span class=\"token constant\">ABC</span> abc abc\n등록했습니다<span class=\"token punctuation\">.</span>\n\n명령어를 입력하세요<span class=\"token operator\">:</span>\ninfo a<span class=\"token annotation punctuation\">@b.c</span>\n<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span> 회원 정보<span class=\"token operator\">:</span> 아이디<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 이메일<span class=\"token operator\">=</span>a<span class=\"token annotation punctuation\">@b.c</span><span class=\"token punctuation\">,</span> 이름<span class=\"token operator\">=</span><span class=\"token constant\">ABC</span><span class=\"token punctuation\">,</span> 등록일<span class=\"token operator\">=</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">06</span><span class=\"token operator\">-</span><span class=\"token number\">23</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span></code></pre></div>\n<p>출력 결과를 보면 회원의 전체 정보를 보여준다. 이는 <code class=\"language-text\">memberPrinter2</code> <code class=\"language-text\">Bean</code>(<code class=\"language-text\">MemberSummaryPrinter</code> 타입 객체)이 아닌 <code class=\"language-text\">memberPrinter1</code> <code class=\"language-text\">Bean</code>을 사용해서 회원 정보를 출력한 것을 의미한다.</p>\n<p>즉 설정 클래스(@Configuration)에서 세터 메서드를 통해 의존을 주입해도 해당 세터 메서드에 @Autowired 어노테이션이 붙어있으면 자동 주입을 통해 일치하는 빈을 주입한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\t<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token annotation punctuation\">@Autowired</span> <span class=\"token comment\">// 자동 주입**</span>\n\t<span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"printer\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setPrinter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MemberPrinter</span> printer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n\t<span class=\"token comment\">// SummaryPrinter 타입 Bean이 아닌 MemberPrinter를 주입받는다.</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>printer <span class=\"token operator\">=</span> printer<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>따라서 @Autowired 어노테이션을 사용했다면 설정 클래스에서 객체를 주입하기 보다는 스프링이 제공하는 자동 주입을 사용하는 편이 낫다.</strong></p>\n<aside>\n✅ 자동 주입을 하는 코드와 수동으로 주입하는 코드가 섞여 있으면 주입을 제대로 하지 않아서 NPE 예외가 발생했을 때 원인을 찾는데 시간이 걸릴 수 있다. 의존 자동 주입(Autowired)를 일관되게 사용해야 이런 문제가 줄어든다. @Autowired를 사용하고 있다면 일부 자동 주입을 적용하기 어려운 코드를 제외한 나머지 코드는 @Autowird를 사용하자.\n</aside>","excerpt":"@Configuration  클래스에서 의존 주입(명시적 주입)을 했는데 자동 주입 대상이면 어떻게 될까? MemberInfoPrinter 클래스의 setPrinter 메소드는 위와 같이 @Autowired 어노테이션이 붙어 있다.  메소드는  클래…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/autowired_and_manual_injection/#configuration--%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90%EC%84%9C-%EC%9D%98%EC%A1%B4-%EC%A3%BC%EC%9E%85%EB%AA%85%EC%8B%9C%EC%A0%81-%EC%A3%BC%EC%9E%85%EC%9D%84-%ED%96%88%EB%8A%94%EB%8D%B0-%EC%9E%90%EB%8F%99-%EC%A3%BC%EC%9E%85-%EB%8C%80%EC%83%81%EC%9D%B4%EB%A9%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%90%A0%EA%B9%8C\">@Configuration  클래스에서 의존 주입(명시적 주입)을 했는데 자동 주입 대상이면 어떻게 될까?</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/autowired_and_manual_injection/#%EC%B6%9C%EB%A0%A5-%EA%B2%B0%EA%B3%BC\">출력 결과</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/autowired_and_manual_injection/"},"frontmatter":{"title":"[Spring] @Autowird 자동 의존 주입과 명시적 의존 주입 간의 관계","date":"Jun 23, 2022","tags":["Spring","스프링5입문시리즈"],"keywords":["스프링","스프링부트","SpringBoot","Autowired"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/autowired_and_manual_injection/","series":[],"lastmod":"2022-06-23"}},"staticQueryHashes":["2027115977","694178885"]}