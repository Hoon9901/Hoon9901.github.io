{"componentChunkName":"component---src-templates-post-tsx","path":"/component-scan-conflict/","result":{"data":{"markdownRemark":{"html":"<p>컴포넌트 스캔 기능을 사용해서 자동 빈 등록할 때에는 충돌에 주의해야한다.</p>\n<p>크게 두가지의 충돌이 발생할 수 있다.</p>\n<h1 id=\"1-빈-이름-충돌\" style=\"position:relative;\"><a href=\"#1-%EB%B9%88-%EC%9D%B4%EB%A6%84-%EC%B6%A9%EB%8F%8C\" aria-label=\"1 빈 이름 충돌 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 빈 이름 충돌</h1>\n<ul>\n<li>두개의 패키지에 같은 이름의 클래스가 존재할 때(모두 <code class=\"language-text\">@Component</code> 가 붙어있음)</li>\n<li>\n<p><code class=\"language-text\">ConflictingBeanDefinitionException</code> 발생함</p>\n<ul>\n<li>클래스를 빈으로 등록할 떄 사용한 빈 이름이 타입이 일치하지 않는(다른 타입) 클래스의 빈 이름과 충돌이 난다는 것</li>\n</ul>\n</li>\n</ul>\n<p>컴포넌트 스캔 과정에서 쉽게 발생할 수 있다. 컴포넌트 스캔과정에서 서로 다른 타입인데 같은 빈 이름을 사용하는 경우가 있다면 <strong>둘 중 하나에 명시적으로 빈 이름을 지정해서 이름 충돌을 피해야한다</strong>.</p>\n<h1 id=\"2-수동-등록한-빈과-충돌\" style=\"position:relative;\"><a href=\"#2-%EC%88%98%EB%8F%99-%EB%93%B1%EB%A1%9D%ED%95%9C-%EB%B9%88%EA%B3%BC-%EC%B6%A9%EB%8F%8C\" aria-label=\"2 수동 등록한 빈과 충돌 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 수동 등록한 빈과 충돌</h1>\n<h2 id=\"수동-등록한-빈의-경우\" style=\"position:relative;\"><a href=\"#%EC%88%98%EB%8F%99-%EB%93%B1%EB%A1%9D%ED%95%9C-%EB%B9%88%EC%9D%98-%EA%B2%BD%EC%9A%B0\" aria-label=\"수동 등록한 빈의 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>수동 등록한 빈의 경우</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberDao</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>해당 클래스는 컴포넌트 스캔 대상</li>\n<li>자동 등록된 빈의 이름은 “<code class=\"language-text\">memberDao</code>”</li>\n</ul>\n<p>다음과 같이 설정 클래스에 직접 <code class=\"language-text\">MemberDao</code> 클래스를 “<code class=\"language-text\">memberDao</code>”라는 이름의 빈으로 등록하면 어떻게 될까?</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span>basePackages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"spring\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppCtx</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token annotation punctuation\">@Bean</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">MemberDao</span> <span class=\"token function\">memberDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">MemberDao</span> memberDao <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemberDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> memberDao<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>스캔할 때 사용하는 빈 이름과 수동 등록한 빈 이름이 같은 경우,</p>\n<p>수동 등록한 빈이 우선된다. 즉 <code class=\"language-text\">MemberDao</code> 타입의 빈은 <code class=\"language-text\">AppCtx</code>에서 정의한 한개만 존재.</p>\n<h2 id=\"다른-이름의-빈을-수동-등록할-경우\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EB%A5%B8-%EC%9D%B4%EB%A6%84%EC%9D%98-%EB%B9%88%EC%9D%84-%EC%88%98%EB%8F%99-%EB%93%B1%EB%A1%9D%ED%95%A0-%EA%B2%BD%EC%9A%B0\" aria-label=\"다른 이름의 빈을 수동 등록할 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다른 이름의 빈을 수동 등록할 경우</h2>\n<p>다음과 같이 다른 이름을 사용한다면?</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span>basePackages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"spring\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppCtx</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token annotation punctuation\">@Bean</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">MemberDao</span> <span class=\"token function\">memberDao2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">MemberDao</span> memberDao <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemberDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> memberDao<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 경우 스캔 등록한 “<code class=\"language-text\">memberDao</code>” 빈과 수동 등록한 “<code class=\"language-text\">memberDao2</code>” 빈이 모두 존재한다. <code class=\"language-text\">MemberDao</code> 타입의 빈이 두 개가 생성되므로 자동 주입(<code class=\"language-text\">@Autowired</code>)하는 코드는 <code class=\"language-text\">@Qualifier</code> 어노테이션을 사용해서 알맞은 빈을 선택해야한다.</p>","excerpt":"컴포넌트 스캔 기능을 사용해서 자동 빈 등록할 때에는 충돌에 주의해야한다. 크게 두가지의 충돌이 발생할 수 있다. 1. 빈 이름 충돌 두개의 패키지에 같은 이름의 클래스가 존재할 때(모두  가 붙어있음)  발생함 클래스를 빈으로 등록할 떄 사용한 빈…","tableOfContents":"<ul>\n<li><a href=\"/component-scan-conflict/#1-%EB%B9%88-%EC%9D%B4%EB%A6%84-%EC%B6%A9%EB%8F%8C\">1. 빈 이름 충돌</a></li>\n<li>\n<p><a href=\"/component-scan-conflict/#2-%EC%88%98%EB%8F%99-%EB%93%B1%EB%A1%9D%ED%95%9C-%EB%B9%88%EA%B3%BC-%EC%B6%A9%EB%8F%8C\">2. 수동 등록한 빈과 충돌</a></p>\n<ul>\n<li><a href=\"/component-scan-conflict/#%EC%88%98%EB%8F%99-%EB%93%B1%EB%A1%9D%ED%95%9C-%EB%B9%88%EC%9D%98-%EA%B2%BD%EC%9A%B0\">수동 등록한 빈의 경우</a></li>\n<li><a href=\"/component-scan-conflict/#%EB%8B%A4%EB%A5%B8-%EC%9D%B4%EB%A6%84%EC%9D%98-%EB%B9%88%EC%9D%84-%EC%88%98%EB%8F%99-%EB%93%B1%EB%A1%9D%ED%95%A0-%EA%B2%BD%EC%9A%B0\">다른 이름의 빈을 수동 등록할 경우</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/component-scan-conflict/"},"frontmatter":{"title":"[Spring] 컴포넌트 스캔에 따른 충돌처리","date":"Jun 27, 2022","tags":["Spring"],"keywords":["스프링","스프링부트","SpringBoot","Component","ComponentScan","Conflict"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/component-scan-conflict/","series":[],"lastmod":"2022-06-27"}},"staticQueryHashes":["2027115977","694178885"]}