{"version":3,"sources":["webpack:///./src/components/PostList/index.tsx","webpack:///./src/pages/tags.tsx"],"names":["PostList","props","posts","_useState","useState","showCnt","setShowCnt","_useState2","currentPostList","setCurrentPostList","sortedPosts","useMemo","sort","a","b","af","node","frontmatter","bf","aDate","Date","update","includes","date","bDate","throttleScrollHandler","useCallback","_throttle","window","outerHeight","document","querySelector","getBoundingClientRect","bottom","prev","length","expendPostList","list","mapToList","map","post","excerpt","fields","slug","title","tags","Number","split","mapTag","tag","React","key","className","Link","to","concat","_toConsumableArray","useEffect","slice","addEventListener","removeEventListener","Tags","group","data","allMarkdownRemark","largeCount","setLargeCount","targetTag","setTargetTag","_useState3","x","fieldValue","toLocaleLowerCase","y","tagList","g","fontSize","style","Math","round","totalCount","toString","opacity","fontWeight","onClick","href","getPostList","filter","edges","_location","location","hash","_step","large","_iterator","_createForOfIteratorHelperLoose","done","value","Layout","SEO","id"],"mappings":"8NAwHeA,IA3GE,SAACC,GAChB,IAAQC,EAAUD,EAAVC,MACRC,EAA8BC,mBAAS,IAAhCC,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAC1BI,EAA8CH,mBAAwB,IAA/DI,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GACpCG,EAAcC,mBAAQ,WAY1B,OAXAT,EAAMU,MAAK,SAACC,EAAQC,GAClB,IAAMC,EAAKF,EAAEG,KAAKC,YACZC,EAAKJ,EAAEE,KAAKC,YAEZE,EAAQ,IAAIC,KAAKL,EAAGM,OAAOC,SAAS,QAAUP,EAAGQ,KAAOR,EAAGM,QAC3DG,EAAQ,IAAIJ,KAAKF,EAAGG,OAAOC,SAAS,QAAUJ,EAAGK,KAAOL,EAAGG,QAEjE,OAAIF,EAAQK,EAAc,EACtBL,EAAQK,GAAe,EACpB,KAEFtB,IACN,CAACA,IAEEuB,EAAwBC,sBAC5BC,KAAS,WAELC,OAAOC,YAAeC,SAASC,cAAc,cAAiCC,wBAAwBC,QAEtG3B,GAAW,SAAC4B,GACV,OAAIA,GAAQxB,EAAYyB,OAAeD,EAChCA,EAAO,QAGjB,KACH,CAACxB,IAGG0B,EAAiBV,uBAAY,SAACW,GAClC,IAAMC,EAAYD,EAAKE,KAAI,SAACC,GAC1B,IAAQxB,EAASwB,EAATxB,KACAyB,EAAiCzB,EAAjCyB,QAASC,EAAwB1B,EAAxB0B,OAAQzB,EAAgBD,EAAhBC,YACjB0B,EAASD,EAATC,KACApB,EAAsBN,EAAtBM,KAAMqB,EAAgB3B,EAAhB2B,MAAOC,EAAS5B,EAAT4B,KACjBxB,EAASJ,EAAYI,OACY,IAAjCyB,OAAOzB,EAAO0B,MAAM,KAAK,MAAW1B,EAAS,MAEjD,IAAM2B,EAASH,EAAKN,KAAI,SAACU,GACvB,GAAY,cAARA,EAEJ,OACEC,gBAAA,OAAKC,IAAQR,EAAI,IAAIM,EAAOG,UAAU,OACpCF,gBAAA,YACEA,gBAACG,OAAI,CAACC,GAAE,SAAWL,GAAM,IAAMA,QAMvC,OACEC,gBAAA,MAAIC,IAAKR,EAAMS,UAAS,QACtBF,gBAAA,eACEA,gBAAA,MAAIE,UAAU,SACZF,gBAACG,OAAI,CAACC,GAAIX,GAAOC,IAEnBM,gBAAA,OAAKE,UAAU,QACbF,gBAAA,OAAKE,UAAU,aACbF,gBAAA,QAAME,UAAU,QAAQ7B,GACvBF,EAAS6B,gBAAA,QAAME,UAAU,UAAS,IAAM,aAAc/B,EAAM,KAAc,MAE5EwB,EAAKV,QAAsB,cAAZU,EAAK,GAAqBK,gBAAA,QAAME,UAAU,YAAW,KAAW,KAChFF,gBAAA,MAAIE,UAAU,YAAYJ,IAE5BE,gBAACG,OAAI,CAACC,GAAIX,GACRO,gBAAA,QAAME,UAAU,WAAWX,SAOrChC,GAAmB,SAACyB,GAClB,MAAO,GAAPqB,OAAAC,YAAWtB,GAAIsB,YAAKlB,SAErB,IAqBH,OAnBAmB,qBAAU,WACJpD,EAAU,GAAiB,KAAZA,GAAgB+B,EAAe1B,EAAYgD,MAAMlD,EAAgB2B,OAAQ9B,MAC3F,CAACA,IAEJoD,qBAAU,WAUR,OATIjD,EAAgB2B,QAAQ1B,EAAmB,IAE/CH,GAAW,SAAC4B,GAEV,OADa,KAATA,GAAaE,EAAe1B,EAAYgD,MAAM,EAAG,KAC9C,MAGT9B,OAAO+B,iBAAiB,SAAUlC,GAE3B,WACLG,OAAOgC,oBAAoB,SAAUnC,MAEtC,CAACf,IAGFwC,gBAAA,OAAKE,UAAU,aACbF,gBAAA,UAAK1C,M,s7BCWIqD,UA/GF,SAAC5D,GACZ,IACQ6D,EADS7D,EAAT8D,KACeC,kBAAfF,MAER3D,EAAoCC,mBAAS,GAAtC6D,EAAU9D,EAAA,GAAE+D,EAAa/D,EAAA,GAChCI,EAAkCH,qBAA3B+D,EAAS5D,EAAA,GAAE6D,EAAY7D,EAAA,GAC9B8D,EAA8CjE,mBAAS,IAAhDI,EAAe6D,EAAA,GAAE5D,EAAkB4D,EAAA,GAO1CP,EAAMlD,MAAK,SAACC,EAAcC,GACxB,IAAMwD,EAAIzD,EAAE0D,WAAWC,oBACjBC,EAAI3D,EAAEyD,WAAWC,oBAEvB,OAAIF,EAAIG,GAAW,EACfA,EAAIH,EAAU,EACX,KAGT,IAAMI,EAAUZ,EAAMvB,KAAI,SAACoC,GACzB,IACMC,EAKN,OACE1B,gBAAA,MAAIC,IAAKwB,EAAEJ,YACTrB,gBAAA,QACEE,UAAU,WACVyB,MAAO,CACLD,SAA2B,cAAjBD,EAAEJ,YAVdK,EAAWE,KAAKC,MAAM,IAAMd,EAAaU,EAAEK,aAAaC,WACxDL,EAASzC,QAAU,IAAGyC,EAAW,IAAIA,GAC/B9B,OAAO8B,GAAY,IAAM,GAAG,OAQyB,SACzDM,QAASP,EAAEJ,aAAeJ,EAAY,MAAQ,MAC9CgB,WAAYR,EAAEJ,aAAeJ,EAAY,OAAS,UAEpDiB,QAAS,WACPhB,EAAaO,EAAEJ,cAGjBrB,gBAAA,KAAGmC,KAAI,IAAMV,EAAEJ,YAAeI,EAAEJ,iBAMlCe,EAAc5D,uBAAY,WAC9B,OAAIoC,EAAMyB,QAAO,SAACZ,GAAY,OAAKA,EAAEJ,aAAeJ,KAAWhC,OACtD2B,EAAMyB,QAAO,SAACZ,GAAY,OAAKA,EAAEJ,aAAeJ,KAAW,GAAGqB,MAEnE1B,EAAMyB,QAAO,SAACZ,GAAY,MAAsB,cAAjBA,EAAEJ,cAA4BpC,OACxD2B,EAAMyB,QAAO,SAACZ,GAAY,MAAsB,cAAjBA,EAAEJ,cAA4B,GAAGiB,MAElE,KACN,CAACrB,IAgBJ,OAdAV,qBAAU,WAAM,IAAAgC,EACdrB,EAAqB,QAARqB,EAAAC,gBAAQ,IAAAD,GAARA,EAAUE,KAAOD,SAASC,KAAK5C,MAAM,KAAK,GAAK,aAG5D,IADA,IACqB6C,EADjBC,EAAQ,EACZC,EAAAC,EAAgBjC,KAAK8B,EAAAE,KAAAE,MAAE,KAAZrB,EAACiB,EAAAK,MACW,cAAjBtB,EAAEJ,YAA8BI,EAAEK,WAAaa,IAAOA,EAAQlB,EAAEK,YAEtEd,EAAc2B,KACb,IAEHpC,qBAAU,WACJU,GAAW1D,EAAmB6E,OACjC,CAACnB,IAGFjB,gBAACgD,IAAM,KACLhD,gBAACiD,IAAG,CAACvD,MAAM,SACXM,gBAAA,OAAKkD,GAAG,QACNlD,gBAAA,OAAKE,UAAU,iBACbF,gBAAA,UAAKwB,IAGPxB,gBAAClD,IAAQ,CAACE,MAAOM,EAAgB2B,OAAS3B,EAAkB","file":"component---src-pages-tags-tsx-aaa3a74c64a212f5c7f8.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react';\nimport { useEffect, useState, useCallback, useMemo } from 'react';\nimport { Link } from 'gatsby';\nimport { throttle } from 'lodash';\n\nimport './postList.scss';\n\ninterface PostListProps {\n  posts: any[];\n}\n\nconst PostList = (props: PostListProps) => {\n  const { posts } = props;\n  const [showCnt, setShowCnt] = useState(10);\n  const [currentPostList, setCurrentPostList] = useState<JSX.Element[]>([]);\n  const sortedPosts = useMemo(() => {\n    posts.sort((a: any, b: any) => {\n      const af = a.node.frontmatter;\n      const bf = b.node.frontmatter;\n\n      const aDate = new Date(af.update.includes('0001') ? af.date : af.update);\n      const bDate = new Date(bf.update.includes('0001') ? bf.date : bf.update);\n\n      if (aDate < bDate) return 1;\n      if (aDate > bDate) return -1;\n      return 0;\n    });\n    return posts;\n  }, [posts]);\n\n  const throttleScrollHandler = useCallback(\n    throttle(() => {\n      if (\n        window.outerHeight > (document.querySelector('.post-list') as HTMLDivElement).getBoundingClientRect().bottom\n      ) {\n        setShowCnt((prev: number) => {\n          if (prev >= sortedPosts.length) return prev;\n          return prev + 10;\n        });\n      }\n    }, 250),\n    [sortedPosts]\n  );\n\n  const expendPostList = useCallback((list: any) => {\n    const mapToList = list.map((post: any) => {\n      const { node } = post;\n      const { excerpt, fields, frontmatter } = node;\n      const { slug } = fields;\n      const { date, title, tags } = frontmatter;\n      let update = frontmatter.update;\n      if (Number(update.split(',')[1]) === 1) update = null;\n\n      const mapTag = tags.map((tag: string) => {\n        if (tag === 'undefined') return;\n\n        return (\n          <div key={`${slug}-${tag}`} className=\"tag\">\n            <span>\n              <Link to={`/tags#${tag}`}>{`#${tag}`}</Link>\n            </span>\n          </div>\n        );\n      });\n\n      return (\n        <li key={slug} className={`post`}>\n          <article>\n            <h2 className=\"title\">\n              <Link to={slug}>{title}</Link>\n            </h2>\n            <div className=\"info\">\n              <div className=\"date-wrap\">\n                <span className=\"date\">{date}</span>\n                {update ? <span className=\"update\">&nbsp;{`(Updated: ${update})`}</span> : null}\n              </div>\n              {tags.length && tags[0] !== 'undefined' ? <span className=\"info-dot\">Â·</span> : null}\n              <ul className=\"tag-list\">{mapTag}</ul>\n            </div>\n            <Link to={slug}>\n              <span className=\"excerpt\">{excerpt}</span>\n            </Link>\n          </article>\n        </li>\n      );\n    });\n\n    setCurrentPostList((prev: JSX.Element[]) => {\n      return [...prev, ...mapToList];\n    });\n  }, []);\n\n  useEffect(() => {\n    if (showCnt > 0 && showCnt !== 10) expendPostList(sortedPosts.slice(currentPostList.length, showCnt));\n  }, [showCnt]);\n\n  useEffect(() => {\n    if (currentPostList.length) setCurrentPostList([]);\n\n    setShowCnt((prev: number) => {\n      if (prev === 10) expendPostList(sortedPosts.slice(0, 10));\n      return 10;\n    });\n\n    window.addEventListener('scroll', throttleScrollHandler);\n\n    return () => {\n      window.removeEventListener('scroll', throttleScrollHandler);\n    };\n  }, [sortedPosts]);\n\n  return (\n    <div className=\"post-list\">\n      <ul>{currentPostList}</ul>\n    </div>\n  );\n};\n\nexport default PostList;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react';\nimport { useEffect, useState, useCallback } from 'react';\nimport { graphql } from 'gatsby';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/seo';\nimport './styles/tags.scss';\nimport PostList from '../components/PostList';\n\ninterface TagsPageProps {\n  data: any;\n}\n\nconst Tags = (props: TagsPageProps) => {\n  const { data } = props;\n  const { group } = data.allMarkdownRemark;\n\n  const [largeCount, setLargeCount] = useState(0);\n  const [targetTag, setTargetTag] = useState<string | undefined>();\n  const [currentPostList, setCurrentPostList] = useState([]);\n\n  interface groupItem {\n    fieldValue: string;\n    totalCount: number;\n  }\n\n  group.sort((a: groupItem, b: groupItem) => {\n    const x = a.fieldValue.toLocaleLowerCase();\n    const y = b.fieldValue.toLocaleLowerCase();\n\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n  });\n\n  const tagList = group.map((g: groupItem) => {\n    const getFontSize = () => {\n      let fontSize = Math.round(50 / (largeCount / g.totalCount)).toString();\n      if (fontSize.length <= 1) fontSize = `0${fontSize}`;\n      return `${Number(fontSize) / 100 + 0.9}rem`;\n    };\n\n    return (\n      <li key={g.fieldValue}>\n        <span\n          className=\"tag-text\"\n          style={{\n            fontSize: g.fieldValue !== 'undefined' ? getFontSize() : '0.9rem',\n            opacity: g.fieldValue === targetTag ? '0.9' : '0.5',\n            fontWeight: g.fieldValue === targetTag ? 'bold' : 'normal',\n          }}\n          onClick={() => {\n            setTargetTag(g.fieldValue);\n          }}\n        >\n          <a href={`#${g.fieldValue}`}>{g.fieldValue}</a>\n        </span>\n      </li>\n    );\n  });\n\n  const getPostList = useCallback(() => {\n    if (group.filter((g: groupItem) => g.fieldValue === targetTag).length) {\n      return group.filter((g: groupItem) => g.fieldValue === targetTag)[0].edges;\n    }\n    if (group.filter((g: groupItem) => g.fieldValue === 'undefined').length) {\n      return group.filter((g: groupItem) => g.fieldValue === 'undefined')[0].edges;\n    }\n    return [];\n  }, [targetTag]);\n\n  useEffect(() => {\n    setTargetTag(location?.hash ? location.hash.split('#')[1] : 'undefined');\n\n    let large = 0;\n    for (const g of group) {\n      if (g.fieldValue !== 'undefined' && g.totalCount > large) large = g.totalCount;\n    }\n    setLargeCount(large);\n  }, []);\n\n  useEffect(() => {\n    if (targetTag) setCurrentPostList(getPostList());\n  }, [targetTag]);\n\n  return (\n    <Layout>\n      <SEO title=\"Tags\" />\n      <div id=\"tags\">\n        <div className=\"tag-list-wrap\">\n          <ul>{tagList}</ul>\n        </div>\n\n        <PostList posts={currentPostList.length ? currentPostList : []} />\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n        edges {\n          node {\n            excerpt(truncate: true, format: PLAIN)\n            fields {\n              slug\n            }\n            frontmatter {\n              date(formatString: \"MMM DD, YYYY\")\n              update(formatString: \"MMM DD, YYYY\")\n              title\n              tags\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Tags;\n"],"sourceRoot":""}