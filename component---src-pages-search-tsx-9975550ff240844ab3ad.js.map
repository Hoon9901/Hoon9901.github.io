{"version":3,"sources":["webpack:///./src/pages/search.tsx","webpack:///./src/components/PostList/index.tsx"],"names":["Search","props","posts","data","allMarkdownRemark","edges","_useState","useState","value","setValue","_useState2","isTitleOnly","setIsTitleOnly","filteredPosts","useCallback","filter","post","node","frontmatter","rawMarkdownBody","title","lowerValue","toLocaleLowerCase","includes","React","Layout","SEO","id","className","Fa","icon","faSearch","type","name","placeholder","autoComplete","autoFocus","onChange","e","currentTarget","style","opacity","onClick","length","PostList","showCnt","setShowCnt","currentPostList","setCurrentPostList","sortedPosts","useMemo","sort","a","b","af","bf","aDate","Date","update","date","bDate","throttleScrollHandler","_throttle","window","outerHeight","document","querySelector","getBoundingClientRect","bottom","prev","expendPostList","list","mapToList","map","excerpt","fields","slug","tags","Number","split","mapTag","tag","key","Link","to","concat","_toConsumableArray","useEffect","slice","addEventListener","removeEventListener"],"mappings":"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","file":"component---src-pages-search-tsx-9975550ff240844ab3ad.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react';\nimport { useState, useCallback } from 'react';\nimport { FontAwesomeIcon as Fa } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/seo';\nimport { graphql } from 'gatsby';\nimport PostList from '../components/PostList';\nimport './styles/search.scss';\n\ninterface SearchProps {\n  data: any;\n}\n\nconst Search = (props: SearchProps) => {\n  const { data } = props;\n  const posts = data.allMarkdownRemark.edges;\n\n  const [value, setValue] = useState('');\n  const [isTitleOnly, setIsTitleOnly] = useState(true);\n\n  const filteredPosts = useCallback(\n    posts.filter((post: any) => {\n      const { node } = post;\n      const { frontmatter, rawMarkdownBody } = node;\n      const { title } = frontmatter;\n      const lowerValue = value.toLocaleLowerCase();\n\n      if (!isTitleOnly && rawMarkdownBody.toLocaleLowerCase().includes(lowerValue)) return true;\n\n      return title.toLocaleLowerCase().includes(lowerValue);\n    }),\n    [value, isTitleOnly]\n  );\n\n  return (\n    <Layout>\n      <SEO title=\"Search\" />\n      <div id=\"Search\">\n        <div className=\"search-inner-wrap\">\n          <div className=\"input-wrap\">\n            <Fa icon={faSearch} />\n            <input\n              type=\"text\"\n              name=\"search\"\n              id=\"searchInput\"\n              value={value}\n              placeholder=\"Search\"\n              autoComplete=\"off\"\n              autoFocus\n              onChange={(e: React.FormEvent<HTMLInputElement>) => {\n                setValue(e.currentTarget.value);\n              }}\n            />\n            <div className=\"search-toggle\">\n              <span\n                style={{ opacity: isTitleOnly ? 0.8 : 0.15 }}\n                onClick={() => {\n                  setIsTitleOnly(true);\n                }}\n              >\n                in Title\n              </span>\n              <span\n                style={{ opacity: !isTitleOnly ? 0.8 : 0.15 }}\n                onClick={() => {\n                  setIsTitleOnly(false);\n                }}\n              >\n                in Title+Content\n              </span>\n            </div>\n          </div>\n\n          {value !== '' && !filteredPosts.length ? <span className=\"no-result\">No search results</span> : null}\n          <PostList posts={value === '' ? posts : filteredPosts} />\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          rawMarkdownBody\n          excerpt(truncate: true, format: PLAIN)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMM DD, YYYY\")\n            title\n            tags\n            update(formatString: \"MMM DD, YYYY\")\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Search;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react';\nimport { useEffect, useState, useCallback, useMemo } from 'react';\nimport { Link } from 'gatsby';\nimport { throttle } from 'lodash';\n\nimport './postList.scss';\n\ninterface PostListProps {\n  posts: any[];\n}\n\nconst PostList = (props: PostListProps) => {\n  const { posts } = props;\n  const [showCnt, setShowCnt] = useState(10);\n  const [currentPostList, setCurrentPostList] = useState<JSX.Element[]>([]);\n  const sortedPosts = useMemo(() => {\n    posts.sort((a: any, b: any) => {\n      const af = a.node.frontmatter;\n      const bf = b.node.frontmatter;\n\n      const aDate = new Date(af.update.includes('0001') ? af.date : af.update);\n      const bDate = new Date(bf.update.includes('0001') ? bf.date : bf.update);\n\n      if (aDate < bDate) return 1;\n      if (aDate > bDate) return -1;\n      return 0;\n    });\n    return posts;\n  }, [posts]);\n\n  const throttleScrollHandler = useCallback(\n    throttle(() => {\n      if (\n        window.outerHeight > (document.querySelector('.post-list') as HTMLDivElement).getBoundingClientRect().bottom\n      ) {\n        setShowCnt((prev: number) => {\n          if (prev >= sortedPosts.length) return prev;\n          return prev + 10;\n        });\n      }\n    }, 250),\n    [sortedPosts]\n  );\n\n  const expendPostList = useCallback((list: any) => {\n    const mapToList = list.map((post: any) => {\n      const { node } = post;\n      const { excerpt, fields, frontmatter } = node;\n      const { slug } = fields;\n      const { date, title, tags } = frontmatter;\n      let update = frontmatter.update;\n      if (Number(update.split(',')[1]) === 1) update = null;\n\n      const mapTag = tags.map((tag: string) => {\n        if (tag === 'undefined') return;\n\n        return (\n          <div key={`${slug}-${tag}`} className=\"tag\">\n            <span>\n              <Link to={`/tags#${tag}`}>{`#${tag}`}</Link>\n            </span>\n          </div>\n        );\n      });\n\n      return (\n        <li key={slug} className={`post`}>\n          <article>\n            <h2 className=\"title\">\n              <Link to={slug}>{title}</Link>\n            </h2>\n            <div className=\"info\">\n              <div className=\"date-wrap\">\n                <span className=\"date\">{date}</span>\n                {update ? <span className=\"update\">&nbsp;{`(Updated: ${update})`}</span> : null}\n              </div>\n              {tags.length && tags[0] !== 'undefined' ? <span className=\"info-dot\">Â·</span> : null}\n              <ul className=\"tag-list\">{mapTag}</ul>\n            </div>\n            <Link to={slug}>\n              <span className=\"excerpt\">{excerpt}</span>\n            </Link>\n          </article>\n        </li>\n      );\n    });\n\n    setCurrentPostList((prev: JSX.Element[]) => {\n      return [...prev, ...mapToList];\n    });\n  }, []);\n\n  useEffect(() => {\n    if (showCnt > 0 && showCnt !== 10) expendPostList(sortedPosts.slice(currentPostList.length, showCnt));\n  }, [showCnt]);\n\n  useEffect(() => {\n    if (currentPostList.length) setCurrentPostList([]);\n\n    setShowCnt((prev: number) => {\n      if (prev === 10) expendPostList(sortedPosts.slice(0, 10));\n      return 10;\n    });\n\n    window.addEventListener('scroll', throttleScrollHandler);\n\n    return () => {\n      window.removeEventListener('scroll', throttleScrollHandler);\n    };\n  }, [sortedPosts]);\n\n  return (\n    <div className=\"post-list\">\n      <ul>{currentPostList}</ul>\n    </div>\n  );\n};\n\nexport default PostList;\n"],"sourceRoot":""}